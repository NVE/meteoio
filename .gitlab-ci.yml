default:
  image: gcc # official gcc image, based on debian, see https://hub.docker.com/_/gcc/
  before_script:
  - apt-get update && apt-get -y install cmake numdiff
  - export LD_LIBRARY_PATH="$PWD/lib:$LD_LIBRARY_PATH"

stages:
  - build
  - test
  - test_coverage
  - release_build
  - release

build:
  stage: build
  script:
    - mkdir build && cd build
    - cmake -S .. -B . -D DEST:STRING=optimized -D VERSION_FROM_GIT:BOOL=ON -D BUILD_TESTING:BOOL=ON -D BUILD_TESTING_WITH_COVERAGE:BOOL=ON -D USE_LTO_OPTIMIZATIONS:BOOL=OFF -D METEOIO_TIMESERIES:BOOL=OFF
    - make -j 2
    # cleanup and compress to avoid limits in GitLab
    - find . -name "*.o" -type f -delete
    - cd .. && tar -czvf build.tar.gz build
  artifacts:
    expire_in: 1h
    paths:
      - build.tar.gz
      - bin
      - lib

meteo_reading_interpol:
  stage: test
  script:
    - tar -xzvf build.tar.gz
    - cp -r tests build
    - cd build/tests/meteo_reading_interpol
    - ./meteo_reading_int

meteo_reading_no_interpol:
  stage: test
  script:
    - tar -xzvf build.tar.gz
    - cp -r tests build
    - cd build/tests/meteo_reading_no_interpol
    - ./meteo_reading_no_int

dataEditing:
  stage: test
  script:
    - tar -xzvf build.tar.gz
    - cp -r tests build
    - cd build/tests/dataEditing
    - ./data_editing

sun:
  stage: test
  script:
    - tar -xzvf build.tar.gz
    - cp -r tests build
    - cd build/tests/sun
    - ./sun
    - numdiff -r 1e-4 ref_output.txt curr_output.txt

dem_reading:
  stage: test
  script:
    - tar -xzvf build.tar.gz
    - cp -r tests build
    - cd build/tests/dem_reading
    - ./dem_reading

2D_interpolations:
  stage: test
  script:
    - tar -xzvf build.tar.gz
    - cp -r tests build
    - cd build/tests/2D_interpolations
    - ./2D_interpolations 2009-01-19T12:00

arrays:
  stage: test
  script:
    - tar -xzvf build.tar.gz
    - cp -r tests build
    - cd build/tests/arrays
    - ./arrays

coords:
  stage: test
  script:
    - tar -xzvf build.tar.gz
    - cp -r tests build
    - cd build/tests/coords
    - ./coordinates

stats:
  stage: test
  script:
    - tar -xzvf build.tar.gz
    - cp -r tests build
    - cd build/tests/stats
    - ./stats

running times and coverage:
  stage: test_coverage
  script:
    - tar -xzvf build.tar.gz # unpack the built test files and the necessary files for ctest
    - cp -r tests build # copy the required test files into the tests folder
    - cd build
    - ctest && ctest -D NightlyCoverage

release build:
  stage: release_build
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually
  dependencies: []
  script:
    - apt-get -y install doxygen
    - mkdir install
    - cmake -S . -B . -D CMAKE_INSTALL_PREFIX:PATH=./install -D DEST:STRING=optimized -D VERSION_FROM_GIT:BOOL=ON -D BUILD_TESTING:BOOL=OFF -D USE_LTO_OPTIMIZATIONS:BOOL=ON
    - make -j 2
    - make install
    - tar -czvf meteoio-${CI_COMMIT_TAG}.tar.gz install
  artifacts:
    expire_in: never
    paths:
      - meteoio-${CI_COMMIT_TAG}.tar.gz

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually
  dependencies:
    - release build
  script:
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file meteoio-${CI_COMMIT_TAG}.tar.gz "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/meteoio/${CI_COMMIT_TAG}/meteoio-${CI_COMMIT_TAG}.tar.gz"'
  release:
    name: 'Release $CI_COMMIT_TAG'
    description: 'Created using the release-cli'
    tag_name: '$CI_COMMIT_TAG'
    ref: '$CI_COMMIT_TAG'
    assets:
      links:
        - name: 'Linux binary tarball'
          url: 'https://gitlabext.wsl.ch/snow-models/meteoio/-/jobs/${GE_JOB_ID}/artifacts/file/meteoio-${CI_COMMIT_TAG}.tar.gz'
          link_type: 'other'