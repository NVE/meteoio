/* soapGSNWebServiceSoap12BindingProxy.h
   Generated by gSOAP 2.8.7 from GSNWebService.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapGSNWebServiceSoap12BindingProxy_H
#define soapGSNWebServiceSoap12BindingProxy_H
#include "soapH.h"

class SOAP_CMAC GSNWebServiceSoap12BindingProxy : public soap
{ public:
	/// Endpoint URL of service 'GSNWebServiceSoap12BindingProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	GSNWebServiceSoap12BindingProxy();
	/// Constructor with copy of another engine state
	GSNWebServiceSoap12BindingProxy(const struct soap&);
	/// Constructor with endpoint URL
	GSNWebServiceSoap12BindingProxy(const char *url);
	/// Constructor with engine input+output mode control
	GSNWebServiceSoap12BindingProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	GSNWebServiceSoap12BindingProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	GSNWebServiceSoap12BindingProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~GSNWebServiceSoap12BindingProxy();
	/// Initializer used by constructors
	virtual	void GSNWebServiceSoap12BindingProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'getContainerInfo' (returns error code or SOAP_OK)
	virtual	int getContainerInfo(_ns1__getContainerInfo *ns1__getContainerInfo, _ns1__getContainerInfoResponse *ns1__getContainerInfoResponse) { return getContainerInfo(NULL, NULL, ns1__getContainerInfo, ns1__getContainerInfoResponse); }
	virtual	int getContainerInfo(const char *endpoint, const char *soap_action, _ns1__getContainerInfo *ns1__getContainerInfo, _ns1__getContainerInfoResponse *ns1__getContainerInfoResponse);

	/// Web service operation 'getMultiData' (returns error code or SOAP_OK)
	virtual	int getMultiData(_ns1__getMultiData *ns1__getMultiData, _ns1__getMultiDataResponse *ns1__getMultiDataResponse) { return getMultiData(NULL, NULL, ns1__getMultiData, ns1__getMultiDataResponse); }
	virtual	int getMultiData(const char *endpoint, const char *soap_action, _ns1__getMultiData *ns1__getMultiData, _ns1__getMultiDataResponse *ns1__getMultiDataResponse);

	/// Web service operation 'listVirtualSensorNames' (returns error code or SOAP_OK)
	virtual	int listVirtualSensorNames(_ns1__listVirtualSensorNames *ns1__listVirtualSensorNames, _ns1__listVirtualSensorNamesResponse *ns1__listVirtualSensorNamesResponse) { return listVirtualSensorNames(NULL, NULL, ns1__listVirtualSensorNames, ns1__listVirtualSensorNamesResponse); }
	virtual	int listVirtualSensorNames(const char *endpoint, const char *soap_action, _ns1__listVirtualSensorNames *ns1__listVirtualSensorNames, _ns1__listVirtualSensorNamesResponse *ns1__listVirtualSensorNamesResponse);

	/// Web service operation 'getNextData' (returns error code or SOAP_OK)
	virtual	int getNextData(_ns1__getNextData *ns1__getNextData, _ns1__getNextDataResponse *ns1__getNextDataResponse) { return getNextData(NULL, NULL, ns1__getNextData, ns1__getNextDataResponse); }
	virtual	int getNextData(const char *endpoint, const char *soap_action, _ns1__getNextData *ns1__getNextData, _ns1__getNextDataResponse *ns1__getNextDataResponse);

	/// Web service operation 'registerQuery' (returns error code or SOAP_OK)
	virtual	int registerQuery(_ns1__registerQuery *ns1__registerQuery, _ns1__registerQueryResponse *ns1__registerQueryResponse) { return registerQuery(NULL, NULL, ns1__registerQuery, ns1__registerQueryResponse); }
	virtual	int registerQuery(const char *endpoint, const char *soap_action, _ns1__registerQuery *ns1__registerQuery, _ns1__registerQueryResponse *ns1__registerQueryResponse);

	/// Web service operation 'unregisterQuery' (returns error code or SOAP_OK)
	virtual	int unregisterQuery(_ns1__unregisterQuery *ns1__unregisterQuery, _ns1__unregisterQueryResponse *ns1__unregisterQueryResponse) { return unregisterQuery(NULL, NULL, ns1__unregisterQuery, ns1__unregisterQueryResponse); }
	virtual	int unregisterQuery(const char *endpoint, const char *soap_action, _ns1__unregisterQuery *ns1__unregisterQuery, _ns1__unregisterQueryResponse *ns1__unregisterQueryResponse);

	/// Web service operation 'getLatestMultiData' (returns error code or SOAP_OK)
	virtual	int getLatestMultiData(_ns1__getLatestMultiData *ns1__getLatestMultiData, _ns1__getLatestMultiDataResponse *ns1__getLatestMultiDataResponse) { return getLatestMultiData(NULL, NULL, ns1__getLatestMultiData, ns1__getLatestMultiDataResponse); }
	virtual	int getLatestMultiData(const char *endpoint, const char *soap_action, _ns1__getLatestMultiData *ns1__getLatestMultiData, _ns1__getLatestMultiDataResponse *ns1__getLatestMultiDataResponse);

	/// Web service operation 'deleteVirtualSensor' (returns error code or SOAP_OK)
	virtual	int deleteVirtualSensor(_ns1__deleteVirtualSensor *ns1__deleteVirtualSensor, _ns1__deleteVirtualSensorResponse *ns1__deleteVirtualSensorResponse) { return deleteVirtualSensor(NULL, NULL, ns1__deleteVirtualSensor, ns1__deleteVirtualSensorResponse); }
	virtual	int deleteVirtualSensor(const char *endpoint, const char *soap_action, _ns1__deleteVirtualSensor *ns1__deleteVirtualSensor, _ns1__deleteVirtualSensorResponse *ns1__deleteVirtualSensorResponse);

	/// Web service operation 'getVirtualSensorsDetails' (returns error code or SOAP_OK)
	virtual	int getVirtualSensorsDetails(_ns1__getVirtualSensorsDetails *ns1__getVirtualSensorsDetails, _ns1__getVirtualSensorsDetailsResponse *ns1__getVirtualSensorsDetailsResponse) { return getVirtualSensorsDetails(NULL, NULL, ns1__getVirtualSensorsDetails, ns1__getVirtualSensorsDetailsResponse); }
	virtual	int getVirtualSensorsDetails(const char *endpoint, const char *soap_action, _ns1__getVirtualSensorsDetails *ns1__getVirtualSensorsDetails, _ns1__getVirtualSensorsDetailsResponse *ns1__getVirtualSensorsDetailsResponse);

	/// Web service operation 'createVirtualSensor' (returns error code or SOAP_OK)
	virtual	int createVirtualSensor(_ns1__createVirtualSensor *ns1__createVirtualSensor, _ns1__createVirtualSensorResponse *ns1__createVirtualSensorResponse) { return createVirtualSensor(NULL, NULL, ns1__createVirtualSensor, ns1__createVirtualSensorResponse); }
	virtual	int createVirtualSensor(const char *endpoint, const char *soap_action, _ns1__createVirtualSensor *ns1__createVirtualSensor, _ns1__createVirtualSensorResponse *ns1__createVirtualSensorResponse);

	/// Web service operation 'listWrapperURLs' (returns error code or SOAP_OK)
	virtual	int listWrapperURLs(_ns1__listWrapperURLs *ns1__listWrapperURLs, _ns1__listWrapperURLsResponse *ns1__listWrapperURLsResponse) { return listWrapperURLs(NULL, NULL, ns1__listWrapperURLs, ns1__listWrapperURLsResponse); }
	virtual	int listWrapperURLs(const char *endpoint, const char *soap_action, _ns1__listWrapperURLs *ns1__listWrapperURLs, _ns1__listWrapperURLsResponse *ns1__listWrapperURLsResponse);
};
#endif
