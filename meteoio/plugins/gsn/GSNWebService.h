/* GSNWebService.h
   Generated by wsdl2h 2.8.7 from GSNWebService.wsdl and typemap.dat
   2013-03-21 09:00:26 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2012 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on GSNWebService.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://standard.webservice.gsn                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/

// This service uses SOAP 1.2 namespaces:
//gsoap SOAP-ENV schema namespace:	http://www.w3.org/2003/05/soap-envelope
//gsoap SOAP-ENC schema namespace:	http://www.w3.org/2003/05/soap-encoding

/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://standard.webservice.gsn"
ns2 = "http://standard.webservice.gsn/xsd"
ns3 = "http://datarequest.http.gsn/xsd"

*/

#define SOAP_NAMESPACE_OF_ns2	"http://standard.webservice.gsn/xsd"
//gsoap ns2   schema namespace:	http://standard.webservice.gsn/xsd
//gsoap ns2   schema form:	qualified

#define SOAP_NAMESPACE_OF_ns3	"http://datarequest.http.gsn/xsd"
//gsoap ns3   schema namespace:	http://datarequest.http.gsn/xsd
//gsoap ns3   schema form:	qualified

#define SOAP_NAMESPACE_OF_ns1	"http://standard.webservice.gsn"
//gsoap ns1   schema namespace:	http://standard.webservice.gsn
//gsoap ns1   schema form:	qualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns2__GSNWebService_USCOREACDetails.
class ns2__GSNWebService_USCOREACDetails;

//  Forward declaration of class ns2__GSNWebService_USCOREContainerDetails.
class ns2__GSNWebService_USCOREContainerDetails;

//  Forward declaration of class ns2__GSNWebService_USCOREFieldSelector.
class ns2__GSNWebService_USCOREFieldSelector;

//  Forward declaration of class ns2__GSNWebService_USCOREQueryResult.
class ns2__GSNWebService_USCOREQueryResult;

//  Forward declaration of class ns2__GSNWebService_USCOREStreamElement.
class ns2__GSNWebService_USCOREStreamElement;

//  Forward declaration of class ns2__GSNWebService_USCOREDataField.
class ns2__GSNWebService_USCOREDataField;

//  Forward declaration of class ns2__GSNWebService_USCOREVirtualSensorDetails.
class ns2__GSNWebService_USCOREVirtualSensorDetails;

//  Forward declaration of class ns2__GSNWebService_USCOREConfAddressing.
class ns2__GSNWebService_USCOREConfAddressing;

//  Forward declaration of class ns2__GSNWebService_USCOREConfPredicate.
class ns2__GSNWebService_USCOREConfPredicate;

//  Forward declaration of class ns2__GSNWebService_USCOREConfInfo.
class ns2__GSNWebService_USCOREConfInfo;

//  Forward declaration of class ns2__GSNWebService_USCOREConfOutputStructure.
class ns2__GSNWebService_USCOREConfOutputStructure;

//  Forward declaration of class ns2__GSNWebService_USCOREConfProcessor.
class ns2__GSNWebService_USCOREConfProcessor;

//  Forward declaration of class ns2__GSNWebService_USCOREConfWrapper.
class ns2__GSNWebService_USCOREConfWrapper;

//  Forward declaration of class ns2__GSNWebService_USCOREWrapperDetails.
class ns2__GSNWebService_USCOREWrapperDetails;

//  Forward declaration of class ns2__GSNWebService_USCOREWrapperURL.
class ns2__GSNWebService_USCOREWrapperURL;

//  Forward declaration of class ns3__AbstractCriterion.
class ns3__AbstractCriterion;

//  Forward declaration of class ns3__StandardCriterion.
class ns3__StandardCriterion;

//  Forward declaration of class ns3__AggregationCriterion.
class ns3__AggregationCriterion;

//  Forward declaration of class _ns1__getContainerInfo.
class _ns1__getContainerInfo;

//  Forward declaration of class _ns1__getContainerInfoResponse.
class _ns1__getContainerInfoResponse;

//  Forward declaration of class _ns1__getLatestMultiData.
class _ns1__getLatestMultiData;

//  Forward declaration of class _ns1__getLatestMultiDataResponse.
class _ns1__getLatestMultiDataResponse;

//  Forward declaration of class _ns1__getMultiData.
class _ns1__getMultiData;

//  Forward declaration of class _ns1__getMultiDataResponse.
class _ns1__getMultiDataResponse;

//  Forward declaration of class _ns1__getNextData.
class _ns1__getNextData;

//  Forward declaration of class _ns1__getNextDataResponse.
class _ns1__getNextDataResponse;

//  Forward declaration of class _ns1__getVirtualSensorsDetails.
class _ns1__getVirtualSensorsDetails;

//  Forward declaration of class _ns1__getVirtualSensorsDetailsResponse.
class _ns1__getVirtualSensorsDetailsResponse;

//  Forward declaration of class _ns1__listVirtualSensorNames.
class _ns1__listVirtualSensorNames;

//  Forward declaration of class _ns1__listVirtualSensorNamesResponse.
class _ns1__listVirtualSensorNamesResponse;

//  Forward declaration of class _ns1__listWrapperURLs.
class _ns1__listWrapperURLs;

//  Forward declaration of class _ns1__listWrapperURLsResponse.
class _ns1__listWrapperURLsResponse;

//  Forward declaration of class _ns1__createVirtualSensor.
class _ns1__createVirtualSensor;

//  Forward declaration of class _ns1__createVirtualSensorResponse.
class _ns1__createVirtualSensorResponse;

//  Forward declaration of class _ns1__deleteVirtualSensor.
class _ns1__deleteVirtualSensor;

//  Forward declaration of class _ns1__deleteVirtualSensorResponse.
class _ns1__deleteVirtualSensorResponse;

//  Forward declaration of class _ns1__registerQuery.
class _ns1__registerQuery;

//  Forward declaration of class _ns1__registerQueryResponse.
class _ns1__registerQueryResponse;

//  Forward declaration of class _ns1__unregisterQuery.
class _ns1__unregisterQuery;

//  Forward declaration of class _ns1__unregisterQueryResponse.
class _ns1__unregisterQueryResponse;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://standard.webservice.gsn/xsd                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://datarequest.http.gsn/xsd                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://standard.webservice.gsn                                           *
 *                                                                            *
\******************************************************************************/


/// "http://standard.webservice.gsn/xsd":GSNWebService_DetailsType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns2__GSNWebService_USCOREDetailsType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns2__GSNWebService_USCOREDetailsType
{
	ns2__GSNWebService_USCOREDetailsType__INFO,	///< xs:string value="INFO"
	ns2__GSNWebService_USCOREDetailsType__PROCESSOR,	///< xs:string value="PROCESSOR"
	ns2__GSNWebService_USCOREDetailsType__ADDRESSING,	///< xs:string value="ADDRESSING"
	ns2__GSNWebService_USCOREDetailsType__OUTPUTSTRUCTURE,	///< xs:string value="OUTPUTSTRUCTURE"
	ns2__GSNWebService_USCOREDetailsType__WRAPPER,	///< xs:string value="WRAPPER"
};

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://datarequest.http.gsn/xsd                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://standard.webservice.gsn                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://standard.webservice.gsn/xsd                                       *
 *                                                                            *
\******************************************************************************/


/// "http://standard.webservice.gsn/xsd":GSNWebService_ACDetails is a complexType.
class ns2__GSNWebService_USCOREACDetails
{ public:
/// Element username of type xs:string.
    std::string                          username                       1;	///< Required element.
/// Element password of type xs:string.
    std::string                          password                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://standard.webservice.gsn/xsd":GSNWebService_ContainerDetails is a complexType.
class ns2__GSNWebService_USCOREContainerDetails
{ public:
/// Element port of type xs:int.
    int                                  port                           1;	///< Required element.
/// Element sslPort of type xs:int.
    int*                                 sslPort                        0;	///< Optional element.
/// Element author of type xs:string.
    std::string*                         author                         0;	///< Optional element.
/// Element description of type xs:string.
    std::string*                         description                    0;	///< Optional element.
/// Element email of type xs:string.
    std::string*                         email                          0;	///< Optional element.
/// Element name of type xs:string.
    std::string*                         name                           0;	///< Optional element.
/// Element sslKeyPassword of type xs:string.
    std::string*                         sslKeyPassword                 0;	///< Optional element.
/// Element sslKeystorePassword of type xs:string.
    std::string*                         sslKeystorePassword            0;	///< Optional element.
/// Element timeFormat of type xs:string.
    std::string*                         timeFormat                     0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://standard.webservice.gsn/xsd":GSNWebService_FieldSelector is a complexType.
class ns2__GSNWebService_USCOREFieldSelector
{ public:
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > fieldNames                     0;	///< Nullable pointer.
/// Attribute vsname of type xs:string.
   @std::string                          vsname                         1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://standard.webservice.gsn/xsd":GSNWebService_QueryResult is a complexType.
class ns2__GSNWebService_USCOREQueryResult
{ public:
/// Element format of type "http://standard.webservice.gsn/xsd":GSNWebService_StreamElement.
    ns2__GSNWebService_USCOREStreamElement*  format                         0;	///< Optional element.
/// Vector of ns2__GSNWebService_USCOREStreamElement* with length 0..unbounded
    std::vector<ns2__GSNWebService_USCOREStreamElement*> streamElements                 0;
/// Element executedQuery of type xs:string.
    std::string*                         executedQuery                  0;	///< Optional element.
/// Attribute hasNext of type xs:boolean.
   @bool                                 hasNext                        1;	///< Required attribute.
/// Attribute vsname of type xs:string.
   @std::string                          vsname                         1;	///< Required attribute.
/// Attribute sid of type xs:string.
   @std::string                          sid                            1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://standard.webservice.gsn/xsd":GSNWebService_StreamElement is a complexType.
class ns2__GSNWebService_USCOREStreamElement
{ public:
/// Vector of ns2__GSNWebService_USCOREDataField* with length 0..unbounded
    std::vector<ns2__GSNWebService_USCOREDataField*> field                          0;
/// Attribute timed of type xs:string.
   @std::string*                         timed                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://standard.webservice.gsn/xsd":GSNWebService_VirtualSensorDetails is a complexType.
class ns2__GSNWebService_USCOREVirtualSensorDetails
{ public:
/// Element addressing of type "http://standard.webservice.gsn/xsd":GSNWebService_ConfAddressing.
    ns2__GSNWebService_USCOREConfAddressing*  addressing                     0;	///< Optional element.
/// Element info of type "http://standard.webservice.gsn/xsd":GSNWebService_ConfInfo.
    ns2__GSNWebService_USCOREConfInfo*   info                           0;	///< Optional element.
/// Element outputStructure of type "http://standard.webservice.gsn/xsd":GSNWebService_ConfOutputStructure.
    ns2__GSNWebService_USCOREConfOutputStructure*  outputStructure                0;	///< Optional element.
/// Element processor of type "http://standard.webservice.gsn/xsd":GSNWebService_ConfProcessor.
    ns2__GSNWebService_USCOREConfProcessor*  processor                      0;	///< Optional element.
/// Element wrapper of type "http://standard.webservice.gsn/xsd":GSNWebService_ConfWrapper.
    ns2__GSNWebService_USCOREConfWrapper*  wrapper                        0;	///< Optional element.
/// Attribute vsname of type xs:string.
   @std::string                          vsname                         1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://standard.webservice.gsn/xsd":GSNWebService_ConfAddressing is a complexType.
class ns2__GSNWebService_USCOREConfAddressing
{ public:
/// Vector of ns2__GSNWebService_USCOREConfPredicate* with length 0..unbounded
    std::vector<ns2__GSNWebService_USCOREConfPredicate*> predicates                     0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://standard.webservice.gsn/xsd":GSNWebService_ConfInfo is a complexType.
class ns2__GSNWebService_USCOREConfInfo
{ public:
/// Element author of type xs:string.
    std::string*                         author                         0;	///< Optional element.
/// Element description of type xs:string.
    std::string*                         description                    0;	///< Optional element.
/// Element email of type xs:string.
    std::string*                         email                          0;	///< Optional element.
/// Element rate of type xs:string.
    std::string*                         rate                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://standard.webservice.gsn/xsd":GSNWebService_ConfOutputStructure is a complexType.
class ns2__GSNWebService_USCOREConfOutputStructure
{ public:
/// Vector of ns2__GSNWebService_USCOREDataField* with length 0..unbounded
    std::vector<ns2__GSNWebService_USCOREDataField*> fields                         0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://standard.webservice.gsn/xsd":GSNWebService_ConfProcessor is a complexType.
class ns2__GSNWebService_USCOREConfProcessor
{ public:
/// Vector of ns2__GSNWebService_USCOREConfPredicate* with length 0..unbounded
    std::vector<ns2__GSNWebService_USCOREConfPredicate*> initParams                     0;
/// Attribute className of type xs:string.
   @std::string                          className                      1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://standard.webservice.gsn/xsd":GSNWebService_ConfWrapper is a complexType.
class ns2__GSNWebService_USCOREConfWrapper
{ public:
/// Vector of ns2__GSNWebService_USCOREWrapperDetails* with length 0..unbounded
    std::vector<ns2__GSNWebService_USCOREWrapperDetails*> wrapperDetails                 0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://standard.webservice.gsn/xsd":GSNWebService_WrapperDetails is a complexType.
class ns2__GSNWebService_USCOREWrapperDetails
{ public:
/// Element wrapperURLs of type "http://standard.webservice.gsn/xsd":GSNWebService_WrapperURL.
    ns2__GSNWebService_USCOREWrapperURL*  wrapperURLs                    1;	///< Required element.
/// Vector of ns2__GSNWebService_USCOREDataField* with length 0..unbounded
    std::vector<ns2__GSNWebService_USCOREDataField*> outputFormat                   0;
/// Vector of ns2__GSNWebService_USCOREConfPredicate* with length 0..unbounded
    std::vector<ns2__GSNWebService_USCOREConfPredicate*> predicates                     0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://standard.webservice.gsn/xsd":GSNWebService_WrapperURL is a complexType.
class ns2__GSNWebService_USCOREWrapperURL
{ public:
/// Attribute virtualSensor of type xs:string.
   @std::string                          virtualSensor                  1;	///< Required attribute.
/// Attribute source of type xs:string.
   @std::string                          source                         1;	///< Required attribute.
/// Attribute stream of type xs:string.
   @std::string                          stream                         1;	///< Required attribute.
/// Attribute wrapper of type xs:string.
   @std::string                          wrapper                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://datarequest.http.gsn/xsd                                          *
 *                                                                            *
\******************************************************************************/


/// "http://datarequest.http.gsn/xsd":AbstractCriterion is a complexType.
class ns3__AbstractCriterion
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://standard.webservice.gsn                                           *
 *                                                                            *
\******************************************************************************/



/// Top-level root element "http://standard.webservice.gsn":getContainerInfo

/// "http://standard.webservice.gsn":getContainerInfo is a complexType.
class _ns1__getContainerInfo
{ public:
/// Element acDetails of type "http://standard.webservice.gsn/xsd":GSNWebService_ACDetails.
    ns2__GSNWebService_USCOREACDetails*  acDetails                      0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://standard.webservice.gsn":getContainerInfoResponse

/// "http://standard.webservice.gsn":getContainerInfoResponse is a complexType.
class _ns1__getContainerInfoResponse
{ public:
/// Element containerDetails of type "http://standard.webservice.gsn/xsd":GSNWebService_ContainerDetails.
    ns2__GSNWebService_USCOREContainerDetails*  containerDetails               1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://standard.webservice.gsn":getLatestMultiData

/// "http://standard.webservice.gsn":getLatestMultiData is a complexType.
class _ns1__getLatestMultiData
{ public:
/// Element acDetails of type "http://standard.webservice.gsn/xsd":GSNWebService_ACDetails.
    ns2__GSNWebService_USCOREACDetails*  acDetails                      0;	///< Optional element.
/// Vector of ns2__GSNWebService_USCOREFieldSelector* with length 0..unbounded
    std::vector<ns2__GSNWebService_USCOREFieldSelector*> fieldSelector                  0;
/// Attribute timeFormat of type xs:string.
   @std::string*                         timeFormat                     0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://standard.webservice.gsn":getLatestMultiDataResponse

/// "http://standard.webservice.gsn":getLatestMultiDataResponse is a complexType.
class _ns1__getLatestMultiDataResponse
{ public:
/// Vector of ns2__GSNWebService_USCOREQueryResult* with length 0..unbounded
    std::vector<ns2__GSNWebService_USCOREQueryResult*> queryResult                    0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://standard.webservice.gsn":getMultiData

/// "http://standard.webservice.gsn":getMultiData is a complexType.
class _ns1__getMultiData
{ public:
/// Element acDetails of type "http://standard.webservice.gsn/xsd":GSNWebService_ACDetails.
    ns2__GSNWebService_USCOREACDetails*  acDetails                      0;	///< Optional element.
/// Vector of ns2__GSNWebService_USCOREFieldSelector* with length 0..unbounded
    std::vector<ns2__GSNWebService_USCOREFieldSelector*> fieldSelector                  0;
/// Vector of ns3__StandardCriterion* with length 0..unbounded
    std::vector<ns3__StandardCriterion*> conditions                     0;
/// Element aggregation of type "http://datarequest.http.gsn/xsd":AggregationCriterion.
    ns3__AggregationCriterion*           aggregation                    0;	///< Optional element.
/// Attribute from of type xs:long.
   @LONG64*                              from                           0;	///< Optional attribute.
/// Attribute to of type xs:long.
   @LONG64*                              to                             0;	///< Optional attribute.
/// Attribute nb of type xs:int.
   @int*                                 nb                             0;	///< Optional attribute.
/// Attribute timeFormat of type xs:string.
   @std::string*                         timeFormat                     0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://standard.webservice.gsn":getMultiDataResponse

/// "http://standard.webservice.gsn":getMultiDataResponse is a complexType.
class _ns1__getMultiDataResponse
{ public:
/// Vector of ns2__GSNWebService_USCOREQueryResult* with length 0..unbounded
    std::vector<ns2__GSNWebService_USCOREQueryResult*> queryResult                    0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://standard.webservice.gsn":getNextData

/// "http://standard.webservice.gsn":getNextData is a complexType.
class _ns1__getNextData
{ public:
/// Element acDetails of type "http://standard.webservice.gsn/xsd":GSNWebService_ACDetails.
    ns2__GSNWebService_USCOREACDetails*  acDetails                      0;	///< Optional element.
/// Attribute sid of type xs:string.
   @std::string                          sid                            1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://standard.webservice.gsn":getNextDataResponse

/// "http://standard.webservice.gsn":getNextDataResponse is a complexType.
class _ns1__getNextDataResponse
{ public:
/// Vector of ns2__GSNWebService_USCOREQueryResult* with length 0..unbounded
    std::vector<ns2__GSNWebService_USCOREQueryResult*> queryResult                    0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://standard.webservice.gsn":getVirtualSensorsDetails

/// "http://standard.webservice.gsn":getVirtualSensorsDetails is a complexType.
class _ns1__getVirtualSensorsDetails
{ public:
/// Element acDetails of type "http://standard.webservice.gsn/xsd":GSNWebService_ACDetails.
    ns2__GSNWebService_USCOREACDetails*  acDetails                      0;	///< Optional element.
/// Vector of ns2__GSNWebService_USCOREFieldSelector* with length 0..unbounded
    std::vector<ns2__GSNWebService_USCOREFieldSelector*> fieldSelector                  0;
/// Vector of enum ns2__GSNWebService_USCOREDetailsType with length 0..unbounded
    std::vector<enum ns2__GSNWebService_USCOREDetailsType> detailsType                    0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://standard.webservice.gsn":getVirtualSensorsDetailsResponse

/// "http://standard.webservice.gsn":getVirtualSensorsDetailsResponse is a complexType.
class _ns1__getVirtualSensorsDetailsResponse
{ public:
/// Vector of ns2__GSNWebService_USCOREVirtualSensorDetails* with length 0..unbounded
    std::vector<ns2__GSNWebService_USCOREVirtualSensorDetails*> virtualSensorDetails           0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://standard.webservice.gsn":listVirtualSensorNames

/// "http://standard.webservice.gsn":listVirtualSensorNames is a complexType.
class _ns1__listVirtualSensorNames
{ public:
/// Element acDetails of type "http://standard.webservice.gsn/xsd":GSNWebService_ACDetails.
    ns2__GSNWebService_USCOREACDetails*  acDetails                      0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://standard.webservice.gsn":listVirtualSensorNamesResponse

/// "http://standard.webservice.gsn":listVirtualSensorNamesResponse is a complexType.
class _ns1__listVirtualSensorNamesResponse
{ public:
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > virtualSensorName              0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://standard.webservice.gsn":listWrapperURLs

/// "http://standard.webservice.gsn":listWrapperURLs is a complexType.
class _ns1__listWrapperURLs
{ public:
/// Element acDetails of type "http://standard.webservice.gsn/xsd":GSNWebService_ACDetails.
    ns2__GSNWebService_USCOREACDetails*  acDetails                      0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://standard.webservice.gsn":listWrapperURLsResponse

/// "http://standard.webservice.gsn":listWrapperURLsResponse is a complexType.
class _ns1__listWrapperURLsResponse
{ public:
/// Vector of ns2__GSNWebService_USCOREWrapperURL* with length 0..unbounded
    std::vector<ns2__GSNWebService_USCOREWrapperURL*> wrapperURLs                    0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://standard.webservice.gsn":createVirtualSensor

/// "http://standard.webservice.gsn":createVirtualSensor is a complexType.
class _ns1__createVirtualSensor
{ public:
/// Element acDetails of type "http://standard.webservice.gsn/xsd":GSNWebService_ACDetails.
    ns2__GSNWebService_USCOREACDetails*  acDetails                      0;	///< Optional element.
/// Element descriptionFileContent of type xs:string.
    std::string                          descriptionFileContent         1;	///< Required element.
/// Attribute vsname of type xs:string.
   @std::string                          vsname                         1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://standard.webservice.gsn":createVirtualSensorResponse

/// "http://standard.webservice.gsn":createVirtualSensorResponse is a complexType.
class _ns1__createVirtualSensorResponse
{ public:
/// Element status of type xs:boolean.
    bool                                 status                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://standard.webservice.gsn":deleteVirtualSensor

/// "http://standard.webservice.gsn":deleteVirtualSensor is a complexType.
class _ns1__deleteVirtualSensor
{ public:
/// Element acDetails of type "http://standard.webservice.gsn/xsd":GSNWebService_ACDetails.
    ns2__GSNWebService_USCOREACDetails*  acDetails                      0;	///< Optional element.
/// Attribute vsname of type xs:string.
   @std::string                          vsname                         1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://standard.webservice.gsn":deleteVirtualSensorResponse

/// "http://standard.webservice.gsn":deleteVirtualSensorResponse is a complexType.
class _ns1__deleteVirtualSensorResponse
{ public:
/// Element status of type xs:boolean.
    bool                                 status                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://standard.webservice.gsn":registerQuery

/// "http://standard.webservice.gsn":registerQuery is a complexType.
class _ns1__registerQuery
{ public:
/// Element acDetails of type "http://standard.webservice.gsn/xsd":GSNWebService_ACDetails.
    ns2__GSNWebService_USCOREACDetails*  acDetails                      0;	///< Optional element.
/// Vector of ns2__GSNWebService_USCOREDataField* with length 0..unbounded
    std::vector<ns2__GSNWebService_USCOREDataField*> outputStructure                0;
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > vsnames                        0;
/// Attribute queryName of type xs:string.
   @std::string                          queryName                      1;	///< Required attribute.
/// Attribute query of type xs:string.
   @std::string                          query                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://standard.webservice.gsn":registerQueryResponse

/// "http://standard.webservice.gsn":registerQueryResponse is a complexType.
class _ns1__registerQueryResponse
{ public:
/// Element status of type xs:boolean.
    bool                                 status                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://standard.webservice.gsn":unregisterQuery

/// "http://standard.webservice.gsn":unregisterQuery is a complexType.
class _ns1__unregisterQuery
{ public:
/// Element acDetails of type "http://standard.webservice.gsn/xsd":GSNWebService_ACDetails.
    ns2__GSNWebService_USCOREACDetails*  acDetails                      0;	///< Optional element.
/// Element queryName of type xs:string.
    std::string                          queryName                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://standard.webservice.gsn":unregisterQueryResponse

/// "http://standard.webservice.gsn":unregisterQueryResponse is a complexType.
class _ns1__unregisterQueryResponse
{ public:
/// Element status of type xs:boolean.
    bool                                 status                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://standard.webservice.gsn/xsd":GSNWebService_DataField is a complexType with simpleContent.
class ns2__GSNWebService_USCOREDataField
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute type of type xs:string.
   @std::string*                         type                           0;	///< Optional attribute.
/// Attribute description of type xs:string.
   @std::string*                         description                    0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://standard.webservice.gsn/xsd":GSNWebService_ConfPredicate is a complexType with simpleContent.
class ns2__GSNWebService_USCOREConfPredicate
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://datarequest.http.gsn/xsd":StandardCriterion is a complexType with complexContent extension of "http://datarequest.http.gsn/xsd":AbstractCriterion.
class ns3__StandardCriterion : public ns3__AbstractCriterion
{ public:
/*  INHERITED FROM ns3__AbstractCriterion:
    END OF INHERITED FROM ns3__AbstractCriterion */
/// Attribute critJoin of type xs:string.
   @std::string                          critJoin                       1;	///< Required attribute.
/// Attribute field of type xs:string.
   @std::string                          field                          1;	///< Required attribute.
/// Attribute negation of type xs:string.
   @std::string                          negation                       1;	///< Required attribute.
/// Attribute operator of type xs:string.
   @std::string                          operator_                      1;	///< Required attribute.
/// Attribute value of type xs:string.
   @std::string                          value                          1;	///< Required attribute.
/// Attribute vsname of type xs:string.
   @std::string                          vsname                         1;	///< Required attribute.
};

/// "http://datarequest.http.gsn/xsd":AggregationCriterion is a complexType with complexContent extension of "http://datarequest.http.gsn/xsd":AbstractCriterion.
class ns3__AggregationCriterion : public ns3__AbstractCriterion
{ public:
/*  INHERITED FROM ns3__AbstractCriterion:
    END OF INHERITED FROM ns3__AbstractCriterion */
/// Attribute groupOperator of type xs:string.
   @std::string                          groupOperator                  1;	///< Required attribute.
/// Attribute timeRange of type xs:string.
   @std::string                          timeRange                      1;	///< Required attribute.
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://standard.webservice.gsn/xsd                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://standard.webservice.gsn/xsd                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://datarequest.http.gsn/xsd                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://datarequest.http.gsn/xsd                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://standard.webservice.gsn                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://standard.webservice.gsn                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns4  service name:	GSNWebServiceSoap12Binding 
//gsoap ns4  service type:	GSNWebServicePortType 
//gsoap ns4  service port:	http://195.176.244.23:22002/services/GSNWebService/ 
//gsoap ns4  service namespace:	http://standard.webservice.gsn/GSNWebServiceSoap12Binding 
//gsoap ns4  service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns5  service name:	GSNWebServiceSoap11Binding 
//gsoap ns5  service type:	GSNWebServicePortType 
//gsoap ns5  service port:	http://195.176.244.23:22002/services/GSNWebService/ 
//gsoap ns5  service namespace:	http://standard.webservice.gsn/GSNWebServiceSoap11Binding 
//gsoap ns5  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref GSNWebServiceSoap12Binding

  - @ref GSNWebServiceSoap11Binding

@section Service_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page GSNWebServiceSoap12Binding Binding "GSNWebServiceSoap12Binding"

@section GSNWebServiceSoap12Binding_operations Operations of Binding  "GSNWebServiceSoap12Binding"

  - @ref __ns4__getContainerInfo

  - @ref __ns4__getMultiData

  - @ref __ns4__listVirtualSensorNames

  - @ref __ns4__getNextData

  - @ref __ns4__registerQuery

  - @ref __ns4__unregisterQuery

  - @ref __ns4__getLatestMultiData

  - @ref __ns4__deleteVirtualSensor

  - @ref __ns4__getVirtualSensorsDetails

  - @ref __ns4__createVirtualSensor

  - @ref __ns4__listWrapperURLs

@section GSNWebServiceSoap12Binding_ports Endpoints of Binding  "GSNWebServiceSoap12Binding"

  - http://195.176.244.23:22002/services/GSNWebService/

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page GSNWebServiceSoap11Binding Binding "GSNWebServiceSoap11Binding"

@section GSNWebServiceSoap11Binding_operations Operations of Binding  "GSNWebServiceSoap11Binding"

  - @ref __ns5__getContainerInfo

  - @ref __ns5__getMultiData

  - @ref __ns5__listVirtualSensorNames

  - @ref __ns5__getNextData

  - @ref __ns5__registerQuery

  - @ref __ns5__unregisterQuery

  - @ref __ns5__getLatestMultiData

  - @ref __ns5__deleteVirtualSensor

  - @ref __ns5__getVirtualSensorsDetails

  - @ref __ns5__createVirtualSensor

  - @ref __ns5__listWrapperURLs

@section GSNWebServiceSoap11Binding_ports Endpoints of Binding  "GSNWebServiceSoap11Binding"

  - http://195.176.244.23:22002/services/GSNWebService/

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   GSNWebServiceSoap12Binding                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns4__getContainerInfo                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns4__getContainerInfo" of service binding "GSNWebServiceSoap12Binding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "urn:getContainerInfo"

  - Addressing action: "http://standard.webservice.gsn/GSNWebServicePortType/getContainerInfo"

  - Addressing response action: "http://standard.webservice.gsn/GSNWebServicePortType/getContainerInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns4__getContainerInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__getContainerInfo*             ns1__getContainerInfo,
    // response parameters:
    _ns1__getContainerInfoResponse*     ns1__getContainerInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns4__getContainerInfo(
    struct soap *soap,
    // request parameters:
    _ns1__getContainerInfo*             ns1__getContainerInfo,
    // response parameters:
    _ns1__getContainerInfoResponse*     ns1__getContainerInfoResponse
  );
@endcode

C++ proxy class (defined in soapGSNWebServiceSoap12BindingProxy.h):
@code
  class GSNWebServiceSoap12BindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapGSNWebServiceSoap12BindingService.h):
@code
  class GSNWebServiceSoap12BindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns4  service method-style:	getContainerInfo document
//gsoap ns4  service method-encoding:	getContainerInfo literal
//gsoap ns4  service method-action:	getContainerInfo urn:getContainerInfo
//gsoap ns4  service method-output-action:	getContainerInfo http://standard.webservice.gsn/GSNWebServicePortType/getContainerInfoResponse
int __ns4__getContainerInfo(
    _ns1__getContainerInfo*             ns1__getContainerInfo,	///< Request parameter
    _ns1__getContainerInfoResponse*     ns1__getContainerInfoResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns4__getMultiData                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns4__getMultiData" of service binding "GSNWebServiceSoap12Binding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "urn:getMultiData"

  - Addressing action: "http://standard.webservice.gsn/GSNWebServicePortType/getMultiData"

  - Addressing response action: "http://standard.webservice.gsn/GSNWebServicePortType/getMultiDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns4__getMultiData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__getMultiData*                 ns1__getMultiData,
    // response parameters:
    _ns1__getMultiDataResponse*         ns1__getMultiDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns4__getMultiData(
    struct soap *soap,
    // request parameters:
    _ns1__getMultiData*                 ns1__getMultiData,
    // response parameters:
    _ns1__getMultiDataResponse*         ns1__getMultiDataResponse
  );
@endcode

C++ proxy class (defined in soapGSNWebServiceSoap12BindingProxy.h):
@code
  class GSNWebServiceSoap12BindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapGSNWebServiceSoap12BindingService.h):
@code
  class GSNWebServiceSoap12BindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns4  service method-style:	getMultiData document
//gsoap ns4  service method-encoding:	getMultiData literal
//gsoap ns4  service method-action:	getMultiData urn:getMultiData
//gsoap ns4  service method-output-action:	getMultiData http://standard.webservice.gsn/GSNWebServicePortType/getMultiDataResponse
int __ns4__getMultiData(
    _ns1__getMultiData*                 ns1__getMultiData,	///< Request parameter
    _ns1__getMultiDataResponse*         ns1__getMultiDataResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns4__listVirtualSensorNames                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns4__listVirtualSensorNames" of service binding "GSNWebServiceSoap12Binding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "urn:listVirtualSensorNames"

  - Addressing action: "http://standard.webservice.gsn/GSNWebServicePortType/listVirtualSensorNames"

  - Addressing response action: "http://standard.webservice.gsn/GSNWebServicePortType/listVirtualSensorNamesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns4__listVirtualSensorNames(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__listVirtualSensorNames*       ns1__listVirtualSensorNames,
    // response parameters:
    _ns1__listVirtualSensorNamesResponse* ns1__listVirtualSensorNamesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns4__listVirtualSensorNames(
    struct soap *soap,
    // request parameters:
    _ns1__listVirtualSensorNames*       ns1__listVirtualSensorNames,
    // response parameters:
    _ns1__listVirtualSensorNamesResponse* ns1__listVirtualSensorNamesResponse
  );
@endcode

C++ proxy class (defined in soapGSNWebServiceSoap12BindingProxy.h):
@code
  class GSNWebServiceSoap12BindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapGSNWebServiceSoap12BindingService.h):
@code
  class GSNWebServiceSoap12BindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns4  service method-style:	listVirtualSensorNames document
//gsoap ns4  service method-encoding:	listVirtualSensorNames literal
//gsoap ns4  service method-action:	listVirtualSensorNames urn:listVirtualSensorNames
//gsoap ns4  service method-output-action:	listVirtualSensorNames http://standard.webservice.gsn/GSNWebServicePortType/listVirtualSensorNamesResponse
int __ns4__listVirtualSensorNames(
    _ns1__listVirtualSensorNames*       ns1__listVirtualSensorNames,	///< Request parameter
    _ns1__listVirtualSensorNamesResponse* ns1__listVirtualSensorNamesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns4__getNextData                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns4__getNextData" of service binding "GSNWebServiceSoap12Binding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "urn:getNextData"

  - Addressing action: "http://standard.webservice.gsn/GSNWebServicePortType/getNextData"

  - Addressing response action: "http://standard.webservice.gsn/GSNWebServicePortType/getNextDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns4__getNextData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__getNextData*                  ns1__getNextData,
    // response parameters:
    _ns1__getNextDataResponse*          ns1__getNextDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns4__getNextData(
    struct soap *soap,
    // request parameters:
    _ns1__getNextData*                  ns1__getNextData,
    // response parameters:
    _ns1__getNextDataResponse*          ns1__getNextDataResponse
  );
@endcode

C++ proxy class (defined in soapGSNWebServiceSoap12BindingProxy.h):
@code
  class GSNWebServiceSoap12BindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapGSNWebServiceSoap12BindingService.h):
@code
  class GSNWebServiceSoap12BindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns4  service method-style:	getNextData document
//gsoap ns4  service method-encoding:	getNextData literal
//gsoap ns4  service method-action:	getNextData urn:getNextData
//gsoap ns4  service method-output-action:	getNextData http://standard.webservice.gsn/GSNWebServicePortType/getNextDataResponse
int __ns4__getNextData(
    _ns1__getNextData*                  ns1__getNextData,	///< Request parameter
    _ns1__getNextDataResponse*          ns1__getNextDataResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns4__registerQuery                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns4__registerQuery" of service binding "GSNWebServiceSoap12Binding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "urn:registerQuery"

  - Addressing action: "http://standard.webservice.gsn/GSNWebServicePortType/registerQuery"

  - Addressing response action: "http://standard.webservice.gsn/GSNWebServicePortType/registerQueryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns4__registerQuery(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__registerQuery*                ns1__registerQuery,
    // response parameters:
    _ns1__registerQueryResponse*        ns1__registerQueryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns4__registerQuery(
    struct soap *soap,
    // request parameters:
    _ns1__registerQuery*                ns1__registerQuery,
    // response parameters:
    _ns1__registerQueryResponse*        ns1__registerQueryResponse
  );
@endcode

C++ proxy class (defined in soapGSNWebServiceSoap12BindingProxy.h):
@code
  class GSNWebServiceSoap12BindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapGSNWebServiceSoap12BindingService.h):
@code
  class GSNWebServiceSoap12BindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns4  service method-style:	registerQuery document
//gsoap ns4  service method-encoding:	registerQuery literal
//gsoap ns4  service method-action:	registerQuery urn:registerQuery
//gsoap ns4  service method-output-action:	registerQuery http://standard.webservice.gsn/GSNWebServicePortType/registerQueryResponse
int __ns4__registerQuery(
    _ns1__registerQuery*                ns1__registerQuery,	///< Request parameter
    _ns1__registerQueryResponse*        ns1__registerQueryResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns4__unregisterQuery                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns4__unregisterQuery" of service binding "GSNWebServiceSoap12Binding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "urn:unregisterQuery"

  - Addressing action: "http://standard.webservice.gsn/GSNWebServicePortType/unregisterQuery"

  - Addressing response action: "http://standard.webservice.gsn/GSNWebServicePortType/unregisterQueryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns4__unregisterQuery(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__unregisterQuery*              ns1__unregisterQuery,
    // response parameters:
    _ns1__unregisterQueryResponse*      ns1__unregisterQueryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns4__unregisterQuery(
    struct soap *soap,
    // request parameters:
    _ns1__unregisterQuery*              ns1__unregisterQuery,
    // response parameters:
    _ns1__unregisterQueryResponse*      ns1__unregisterQueryResponse
  );
@endcode

C++ proxy class (defined in soapGSNWebServiceSoap12BindingProxy.h):
@code
  class GSNWebServiceSoap12BindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapGSNWebServiceSoap12BindingService.h):
@code
  class GSNWebServiceSoap12BindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns4  service method-style:	unregisterQuery document
//gsoap ns4  service method-encoding:	unregisterQuery literal
//gsoap ns4  service method-action:	unregisterQuery urn:unregisterQuery
//gsoap ns4  service method-output-action:	unregisterQuery http://standard.webservice.gsn/GSNWebServicePortType/unregisterQueryResponse
int __ns4__unregisterQuery(
    _ns1__unregisterQuery*              ns1__unregisterQuery,	///< Request parameter
    _ns1__unregisterQueryResponse*      ns1__unregisterQueryResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns4__getLatestMultiData                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns4__getLatestMultiData" of service binding "GSNWebServiceSoap12Binding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "urn:getLatestMultiData"

  - Addressing action: "http://standard.webservice.gsn/GSNWebServicePortType/getLatestMultiData"

  - Addressing response action: "http://standard.webservice.gsn/GSNWebServicePortType/getLatestMultiDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns4__getLatestMultiData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__getLatestMultiData*           ns1__getLatestMultiData,
    // response parameters:
    _ns1__getLatestMultiDataResponse*   ns1__getLatestMultiDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns4__getLatestMultiData(
    struct soap *soap,
    // request parameters:
    _ns1__getLatestMultiData*           ns1__getLatestMultiData,
    // response parameters:
    _ns1__getLatestMultiDataResponse*   ns1__getLatestMultiDataResponse
  );
@endcode

C++ proxy class (defined in soapGSNWebServiceSoap12BindingProxy.h):
@code
  class GSNWebServiceSoap12BindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapGSNWebServiceSoap12BindingService.h):
@code
  class GSNWebServiceSoap12BindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns4  service method-style:	getLatestMultiData document
//gsoap ns4  service method-encoding:	getLatestMultiData literal
//gsoap ns4  service method-action:	getLatestMultiData urn:getLatestMultiData
//gsoap ns4  service method-output-action:	getLatestMultiData http://standard.webservice.gsn/GSNWebServicePortType/getLatestMultiDataResponse
int __ns4__getLatestMultiData(
    _ns1__getLatestMultiData*           ns1__getLatestMultiData,	///< Request parameter
    _ns1__getLatestMultiDataResponse*   ns1__getLatestMultiDataResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns4__deleteVirtualSensor                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns4__deleteVirtualSensor" of service binding "GSNWebServiceSoap12Binding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "urn:deleteVirtualSensor"

  - Addressing action: "http://standard.webservice.gsn/GSNWebServicePortType/deleteVirtualSensor"

  - Addressing response action: "http://standard.webservice.gsn/GSNWebServicePortType/deleteVirtualSensorResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns4__deleteVirtualSensor(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__deleteVirtualSensor*          ns1__deleteVirtualSensor,
    // response parameters:
    _ns1__deleteVirtualSensorResponse*  ns1__deleteVirtualSensorResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns4__deleteVirtualSensor(
    struct soap *soap,
    // request parameters:
    _ns1__deleteVirtualSensor*          ns1__deleteVirtualSensor,
    // response parameters:
    _ns1__deleteVirtualSensorResponse*  ns1__deleteVirtualSensorResponse
  );
@endcode

C++ proxy class (defined in soapGSNWebServiceSoap12BindingProxy.h):
@code
  class GSNWebServiceSoap12BindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapGSNWebServiceSoap12BindingService.h):
@code
  class GSNWebServiceSoap12BindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns4  service method-style:	deleteVirtualSensor document
//gsoap ns4  service method-encoding:	deleteVirtualSensor literal
//gsoap ns4  service method-action:	deleteVirtualSensor urn:deleteVirtualSensor
//gsoap ns4  service method-output-action:	deleteVirtualSensor http://standard.webservice.gsn/GSNWebServicePortType/deleteVirtualSensorResponse
int __ns4__deleteVirtualSensor(
    _ns1__deleteVirtualSensor*          ns1__deleteVirtualSensor,	///< Request parameter
    _ns1__deleteVirtualSensorResponse*  ns1__deleteVirtualSensorResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns4__getVirtualSensorsDetails                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns4__getVirtualSensorsDetails" of service binding "GSNWebServiceSoap12Binding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "urn:getVirtualSensorsDetails"

  - Addressing action: "http://standard.webservice.gsn/GSNWebServicePortType/getVirtualSensorsDetails"

  - Addressing response action: "http://standard.webservice.gsn/GSNWebServicePortType/getVirtualSensorsDetailsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns4__getVirtualSensorsDetails(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__getVirtualSensorsDetails*     ns1__getVirtualSensorsDetails,
    // response parameters:
    _ns1__getVirtualSensorsDetailsResponse* ns1__getVirtualSensorsDetailsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns4__getVirtualSensorsDetails(
    struct soap *soap,
    // request parameters:
    _ns1__getVirtualSensorsDetails*     ns1__getVirtualSensorsDetails,
    // response parameters:
    _ns1__getVirtualSensorsDetailsResponse* ns1__getVirtualSensorsDetailsResponse
  );
@endcode

C++ proxy class (defined in soapGSNWebServiceSoap12BindingProxy.h):
@code
  class GSNWebServiceSoap12BindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapGSNWebServiceSoap12BindingService.h):
@code
  class GSNWebServiceSoap12BindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns4  service method-style:	getVirtualSensorsDetails document
//gsoap ns4  service method-encoding:	getVirtualSensorsDetails literal
//gsoap ns4  service method-action:	getVirtualSensorsDetails urn:getVirtualSensorsDetails
//gsoap ns4  service method-output-action:	getVirtualSensorsDetails http://standard.webservice.gsn/GSNWebServicePortType/getVirtualSensorsDetailsResponse
int __ns4__getVirtualSensorsDetails(
    _ns1__getVirtualSensorsDetails*     ns1__getVirtualSensorsDetails,	///< Request parameter
    _ns1__getVirtualSensorsDetailsResponse* ns1__getVirtualSensorsDetailsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns4__createVirtualSensor                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns4__createVirtualSensor" of service binding "GSNWebServiceSoap12Binding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "urn:createVirtualSensor"

  - Addressing action: "http://standard.webservice.gsn/GSNWebServicePortType/createVirtualSensor"

  - Addressing response action: "http://standard.webservice.gsn/GSNWebServicePortType/createVirtualSensorResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns4__createVirtualSensor(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__createVirtualSensor*          ns1__createVirtualSensor,
    // response parameters:
    _ns1__createVirtualSensorResponse*  ns1__createVirtualSensorResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns4__createVirtualSensor(
    struct soap *soap,
    // request parameters:
    _ns1__createVirtualSensor*          ns1__createVirtualSensor,
    // response parameters:
    _ns1__createVirtualSensorResponse*  ns1__createVirtualSensorResponse
  );
@endcode

C++ proxy class (defined in soapGSNWebServiceSoap12BindingProxy.h):
@code
  class GSNWebServiceSoap12BindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapGSNWebServiceSoap12BindingService.h):
@code
  class GSNWebServiceSoap12BindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns4  service method-style:	createVirtualSensor document
//gsoap ns4  service method-encoding:	createVirtualSensor literal
//gsoap ns4  service method-action:	createVirtualSensor urn:createVirtualSensor
//gsoap ns4  service method-output-action:	createVirtualSensor http://standard.webservice.gsn/GSNWebServicePortType/createVirtualSensorResponse
int __ns4__createVirtualSensor(
    _ns1__createVirtualSensor*          ns1__createVirtualSensor,	///< Request parameter
    _ns1__createVirtualSensorResponse*  ns1__createVirtualSensorResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns4__listWrapperURLs                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns4__listWrapperURLs" of service binding "GSNWebServiceSoap12Binding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "urn:listWrapperURLs"

  - Addressing action: "http://standard.webservice.gsn/GSNWebServicePortType/listWrapperURLs"

  - Addressing response action: "http://standard.webservice.gsn/GSNWebServicePortType/listWrapperURLsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns4__listWrapperURLs(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__listWrapperURLs*              ns1__listWrapperURLs,
    // response parameters:
    _ns1__listWrapperURLsResponse*      ns1__listWrapperURLsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns4__listWrapperURLs(
    struct soap *soap,
    // request parameters:
    _ns1__listWrapperURLs*              ns1__listWrapperURLs,
    // response parameters:
    _ns1__listWrapperURLsResponse*      ns1__listWrapperURLsResponse
  );
@endcode

C++ proxy class (defined in soapGSNWebServiceSoap12BindingProxy.h):
@code
  class GSNWebServiceSoap12BindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapGSNWebServiceSoap12BindingService.h):
@code
  class GSNWebServiceSoap12BindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns4  service method-style:	listWrapperURLs document
//gsoap ns4  service method-encoding:	listWrapperURLs literal
//gsoap ns4  service method-action:	listWrapperURLs urn:listWrapperURLs
//gsoap ns4  service method-output-action:	listWrapperURLs http://standard.webservice.gsn/GSNWebServicePortType/listWrapperURLsResponse
int __ns4__listWrapperURLs(
    _ns1__listWrapperURLs*              ns1__listWrapperURLs,	///< Request parameter
    _ns1__listWrapperURLsResponse*      ns1__listWrapperURLsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   GSNWebServiceSoap11Binding                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns5__getContainerInfo                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns5__getContainerInfo" of service binding "GSNWebServiceSoap11Binding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "urn:getContainerInfo"

  - Addressing action: "http://standard.webservice.gsn/GSNWebServicePortType/getContainerInfo"

  - Addressing response action: "http://standard.webservice.gsn/GSNWebServicePortType/getContainerInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns5__getContainerInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__getContainerInfo*             ns1__getContainerInfo,
    // response parameters:
    _ns1__getContainerInfoResponse*     ns1__getContainerInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns5__getContainerInfo(
    struct soap *soap,
    // request parameters:
    _ns1__getContainerInfo*             ns1__getContainerInfo,
    // response parameters:
    _ns1__getContainerInfoResponse*     ns1__getContainerInfoResponse
  );
@endcode

C++ proxy class (defined in soapGSNWebServiceSoap11BindingProxy.h):
@code
  class GSNWebServiceSoap11BindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapGSNWebServiceSoap11BindingService.h):
@code
  class GSNWebServiceSoap11BindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns5  service method-style:	getContainerInfo document
//gsoap ns5  service method-encoding:	getContainerInfo literal
//gsoap ns5  service method-action:	getContainerInfo urn:getContainerInfo
//gsoap ns5  service method-output-action:	getContainerInfo http://standard.webservice.gsn/GSNWebServicePortType/getContainerInfoResponse
int __ns5__getContainerInfo(
    _ns1__getContainerInfo*             ns1__getContainerInfo,	///< Request parameter
    _ns1__getContainerInfoResponse*     ns1__getContainerInfoResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns5__getMultiData                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns5__getMultiData" of service binding "GSNWebServiceSoap11Binding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "urn:getMultiData"

  - Addressing action: "http://standard.webservice.gsn/GSNWebServicePortType/getMultiData"

  - Addressing response action: "http://standard.webservice.gsn/GSNWebServicePortType/getMultiDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns5__getMultiData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__getMultiData*                 ns1__getMultiData,
    // response parameters:
    _ns1__getMultiDataResponse*         ns1__getMultiDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns5__getMultiData(
    struct soap *soap,
    // request parameters:
    _ns1__getMultiData*                 ns1__getMultiData,
    // response parameters:
    _ns1__getMultiDataResponse*         ns1__getMultiDataResponse
  );
@endcode

C++ proxy class (defined in soapGSNWebServiceSoap11BindingProxy.h):
@code
  class GSNWebServiceSoap11BindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapGSNWebServiceSoap11BindingService.h):
@code
  class GSNWebServiceSoap11BindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns5  service method-style:	getMultiData document
//gsoap ns5  service method-encoding:	getMultiData literal
//gsoap ns5  service method-action:	getMultiData urn:getMultiData
//gsoap ns5  service method-output-action:	getMultiData http://standard.webservice.gsn/GSNWebServicePortType/getMultiDataResponse
int __ns5__getMultiData(
    _ns1__getMultiData*                 ns1__getMultiData,	///< Request parameter
    _ns1__getMultiDataResponse*         ns1__getMultiDataResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns5__listVirtualSensorNames                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns5__listVirtualSensorNames" of service binding "GSNWebServiceSoap11Binding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "urn:listVirtualSensorNames"

  - Addressing action: "http://standard.webservice.gsn/GSNWebServicePortType/listVirtualSensorNames"

  - Addressing response action: "http://standard.webservice.gsn/GSNWebServicePortType/listVirtualSensorNamesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns5__listVirtualSensorNames(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__listVirtualSensorNames*       ns1__listVirtualSensorNames,
    // response parameters:
    _ns1__listVirtualSensorNamesResponse* ns1__listVirtualSensorNamesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns5__listVirtualSensorNames(
    struct soap *soap,
    // request parameters:
    _ns1__listVirtualSensorNames*       ns1__listVirtualSensorNames,
    // response parameters:
    _ns1__listVirtualSensorNamesResponse* ns1__listVirtualSensorNamesResponse
  );
@endcode

C++ proxy class (defined in soapGSNWebServiceSoap11BindingProxy.h):
@code
  class GSNWebServiceSoap11BindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapGSNWebServiceSoap11BindingService.h):
@code
  class GSNWebServiceSoap11BindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns5  service method-style:	listVirtualSensorNames document
//gsoap ns5  service method-encoding:	listVirtualSensorNames literal
//gsoap ns5  service method-action:	listVirtualSensorNames urn:listVirtualSensorNames
//gsoap ns5  service method-output-action:	listVirtualSensorNames http://standard.webservice.gsn/GSNWebServicePortType/listVirtualSensorNamesResponse
int __ns5__listVirtualSensorNames(
    _ns1__listVirtualSensorNames*       ns1__listVirtualSensorNames,	///< Request parameter
    _ns1__listVirtualSensorNamesResponse* ns1__listVirtualSensorNamesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns5__getNextData                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns5__getNextData" of service binding "GSNWebServiceSoap11Binding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "urn:getNextData"

  - Addressing action: "http://standard.webservice.gsn/GSNWebServicePortType/getNextData"

  - Addressing response action: "http://standard.webservice.gsn/GSNWebServicePortType/getNextDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns5__getNextData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__getNextData*                  ns1__getNextData,
    // response parameters:
    _ns1__getNextDataResponse*          ns1__getNextDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns5__getNextData(
    struct soap *soap,
    // request parameters:
    _ns1__getNextData*                  ns1__getNextData,
    // response parameters:
    _ns1__getNextDataResponse*          ns1__getNextDataResponse
  );
@endcode

C++ proxy class (defined in soapGSNWebServiceSoap11BindingProxy.h):
@code
  class GSNWebServiceSoap11BindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapGSNWebServiceSoap11BindingService.h):
@code
  class GSNWebServiceSoap11BindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns5  service method-style:	getNextData document
//gsoap ns5  service method-encoding:	getNextData literal
//gsoap ns5  service method-action:	getNextData urn:getNextData
//gsoap ns5  service method-output-action:	getNextData http://standard.webservice.gsn/GSNWebServicePortType/getNextDataResponse
int __ns5__getNextData(
    _ns1__getNextData*                  ns1__getNextData,	///< Request parameter
    _ns1__getNextDataResponse*          ns1__getNextDataResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns5__registerQuery                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns5__registerQuery" of service binding "GSNWebServiceSoap11Binding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "urn:registerQuery"

  - Addressing action: "http://standard.webservice.gsn/GSNWebServicePortType/registerQuery"

  - Addressing response action: "http://standard.webservice.gsn/GSNWebServicePortType/registerQueryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns5__registerQuery(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__registerQuery*                ns1__registerQuery,
    // response parameters:
    _ns1__registerQueryResponse*        ns1__registerQueryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns5__registerQuery(
    struct soap *soap,
    // request parameters:
    _ns1__registerQuery*                ns1__registerQuery,
    // response parameters:
    _ns1__registerQueryResponse*        ns1__registerQueryResponse
  );
@endcode

C++ proxy class (defined in soapGSNWebServiceSoap11BindingProxy.h):
@code
  class GSNWebServiceSoap11BindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapGSNWebServiceSoap11BindingService.h):
@code
  class GSNWebServiceSoap11BindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns5  service method-style:	registerQuery document
//gsoap ns5  service method-encoding:	registerQuery literal
//gsoap ns5  service method-action:	registerQuery urn:registerQuery
//gsoap ns5  service method-output-action:	registerQuery http://standard.webservice.gsn/GSNWebServicePortType/registerQueryResponse
int __ns5__registerQuery(
    _ns1__registerQuery*                ns1__registerQuery,	///< Request parameter
    _ns1__registerQueryResponse*        ns1__registerQueryResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns5__unregisterQuery                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns5__unregisterQuery" of service binding "GSNWebServiceSoap11Binding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "urn:unregisterQuery"

  - Addressing action: "http://standard.webservice.gsn/GSNWebServicePortType/unregisterQuery"

  - Addressing response action: "http://standard.webservice.gsn/GSNWebServicePortType/unregisterQueryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns5__unregisterQuery(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__unregisterQuery*              ns1__unregisterQuery,
    // response parameters:
    _ns1__unregisterQueryResponse*      ns1__unregisterQueryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns5__unregisterQuery(
    struct soap *soap,
    // request parameters:
    _ns1__unregisterQuery*              ns1__unregisterQuery,
    // response parameters:
    _ns1__unregisterQueryResponse*      ns1__unregisterQueryResponse
  );
@endcode

C++ proxy class (defined in soapGSNWebServiceSoap11BindingProxy.h):
@code
  class GSNWebServiceSoap11BindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapGSNWebServiceSoap11BindingService.h):
@code
  class GSNWebServiceSoap11BindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns5  service method-style:	unregisterQuery document
//gsoap ns5  service method-encoding:	unregisterQuery literal
//gsoap ns5  service method-action:	unregisterQuery urn:unregisterQuery
//gsoap ns5  service method-output-action:	unregisterQuery http://standard.webservice.gsn/GSNWebServicePortType/unregisterQueryResponse
int __ns5__unregisterQuery(
    _ns1__unregisterQuery*              ns1__unregisterQuery,	///< Request parameter
    _ns1__unregisterQueryResponse*      ns1__unregisterQueryResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns5__getLatestMultiData                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns5__getLatestMultiData" of service binding "GSNWebServiceSoap11Binding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "urn:getLatestMultiData"

  - Addressing action: "http://standard.webservice.gsn/GSNWebServicePortType/getLatestMultiData"

  - Addressing response action: "http://standard.webservice.gsn/GSNWebServicePortType/getLatestMultiDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns5__getLatestMultiData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__getLatestMultiData*           ns1__getLatestMultiData,
    // response parameters:
    _ns1__getLatestMultiDataResponse*   ns1__getLatestMultiDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns5__getLatestMultiData(
    struct soap *soap,
    // request parameters:
    _ns1__getLatestMultiData*           ns1__getLatestMultiData,
    // response parameters:
    _ns1__getLatestMultiDataResponse*   ns1__getLatestMultiDataResponse
  );
@endcode

C++ proxy class (defined in soapGSNWebServiceSoap11BindingProxy.h):
@code
  class GSNWebServiceSoap11BindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapGSNWebServiceSoap11BindingService.h):
@code
  class GSNWebServiceSoap11BindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns5  service method-style:	getLatestMultiData document
//gsoap ns5  service method-encoding:	getLatestMultiData literal
//gsoap ns5  service method-action:	getLatestMultiData urn:getLatestMultiData
//gsoap ns5  service method-output-action:	getLatestMultiData http://standard.webservice.gsn/GSNWebServicePortType/getLatestMultiDataResponse
int __ns5__getLatestMultiData(
    _ns1__getLatestMultiData*           ns1__getLatestMultiData,	///< Request parameter
    _ns1__getLatestMultiDataResponse*   ns1__getLatestMultiDataResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns5__deleteVirtualSensor                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns5__deleteVirtualSensor" of service binding "GSNWebServiceSoap11Binding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "urn:deleteVirtualSensor"

  - Addressing action: "http://standard.webservice.gsn/GSNWebServicePortType/deleteVirtualSensor"

  - Addressing response action: "http://standard.webservice.gsn/GSNWebServicePortType/deleteVirtualSensorResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns5__deleteVirtualSensor(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__deleteVirtualSensor*          ns1__deleteVirtualSensor,
    // response parameters:
    _ns1__deleteVirtualSensorResponse*  ns1__deleteVirtualSensorResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns5__deleteVirtualSensor(
    struct soap *soap,
    // request parameters:
    _ns1__deleteVirtualSensor*          ns1__deleteVirtualSensor,
    // response parameters:
    _ns1__deleteVirtualSensorResponse*  ns1__deleteVirtualSensorResponse
  );
@endcode

C++ proxy class (defined in soapGSNWebServiceSoap11BindingProxy.h):
@code
  class GSNWebServiceSoap11BindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapGSNWebServiceSoap11BindingService.h):
@code
  class GSNWebServiceSoap11BindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns5  service method-style:	deleteVirtualSensor document
//gsoap ns5  service method-encoding:	deleteVirtualSensor literal
//gsoap ns5  service method-action:	deleteVirtualSensor urn:deleteVirtualSensor
//gsoap ns5  service method-output-action:	deleteVirtualSensor http://standard.webservice.gsn/GSNWebServicePortType/deleteVirtualSensorResponse
int __ns5__deleteVirtualSensor(
    _ns1__deleteVirtualSensor*          ns1__deleteVirtualSensor,	///< Request parameter
    _ns1__deleteVirtualSensorResponse*  ns1__deleteVirtualSensorResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns5__getVirtualSensorsDetails                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns5__getVirtualSensorsDetails" of service binding "GSNWebServiceSoap11Binding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "urn:getVirtualSensorsDetails"

  - Addressing action: "http://standard.webservice.gsn/GSNWebServicePortType/getVirtualSensorsDetails"

  - Addressing response action: "http://standard.webservice.gsn/GSNWebServicePortType/getVirtualSensorsDetailsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns5__getVirtualSensorsDetails(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__getVirtualSensorsDetails*     ns1__getVirtualSensorsDetails,
    // response parameters:
    _ns1__getVirtualSensorsDetailsResponse* ns1__getVirtualSensorsDetailsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns5__getVirtualSensorsDetails(
    struct soap *soap,
    // request parameters:
    _ns1__getVirtualSensorsDetails*     ns1__getVirtualSensorsDetails,
    // response parameters:
    _ns1__getVirtualSensorsDetailsResponse* ns1__getVirtualSensorsDetailsResponse
  );
@endcode

C++ proxy class (defined in soapGSNWebServiceSoap11BindingProxy.h):
@code
  class GSNWebServiceSoap11BindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapGSNWebServiceSoap11BindingService.h):
@code
  class GSNWebServiceSoap11BindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns5  service method-style:	getVirtualSensorsDetails document
//gsoap ns5  service method-encoding:	getVirtualSensorsDetails literal
//gsoap ns5  service method-action:	getVirtualSensorsDetails urn:getVirtualSensorsDetails
//gsoap ns5  service method-output-action:	getVirtualSensorsDetails http://standard.webservice.gsn/GSNWebServicePortType/getVirtualSensorsDetailsResponse
int __ns5__getVirtualSensorsDetails(
    _ns1__getVirtualSensorsDetails*     ns1__getVirtualSensorsDetails,	///< Request parameter
    _ns1__getVirtualSensorsDetailsResponse* ns1__getVirtualSensorsDetailsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns5__createVirtualSensor                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns5__createVirtualSensor" of service binding "GSNWebServiceSoap11Binding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "urn:createVirtualSensor"

  - Addressing action: "http://standard.webservice.gsn/GSNWebServicePortType/createVirtualSensor"

  - Addressing response action: "http://standard.webservice.gsn/GSNWebServicePortType/createVirtualSensorResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns5__createVirtualSensor(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__createVirtualSensor*          ns1__createVirtualSensor,
    // response parameters:
    _ns1__createVirtualSensorResponse*  ns1__createVirtualSensorResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns5__createVirtualSensor(
    struct soap *soap,
    // request parameters:
    _ns1__createVirtualSensor*          ns1__createVirtualSensor,
    // response parameters:
    _ns1__createVirtualSensorResponse*  ns1__createVirtualSensorResponse
  );
@endcode

C++ proxy class (defined in soapGSNWebServiceSoap11BindingProxy.h):
@code
  class GSNWebServiceSoap11BindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapGSNWebServiceSoap11BindingService.h):
@code
  class GSNWebServiceSoap11BindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns5  service method-style:	createVirtualSensor document
//gsoap ns5  service method-encoding:	createVirtualSensor literal
//gsoap ns5  service method-action:	createVirtualSensor urn:createVirtualSensor
//gsoap ns5  service method-output-action:	createVirtualSensor http://standard.webservice.gsn/GSNWebServicePortType/createVirtualSensorResponse
int __ns5__createVirtualSensor(
    _ns1__createVirtualSensor*          ns1__createVirtualSensor,	///< Request parameter
    _ns1__createVirtualSensorResponse*  ns1__createVirtualSensorResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns5__listWrapperURLs                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns5__listWrapperURLs" of service binding "GSNWebServiceSoap11Binding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "urn:listWrapperURLs"

  - Addressing action: "http://standard.webservice.gsn/GSNWebServicePortType/listWrapperURLs"

  - Addressing response action: "http://standard.webservice.gsn/GSNWebServicePortType/listWrapperURLsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns5__listWrapperURLs(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__listWrapperURLs*              ns1__listWrapperURLs,
    // response parameters:
    _ns1__listWrapperURLsResponse*      ns1__listWrapperURLsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns5__listWrapperURLs(
    struct soap *soap,
    // request parameters:
    _ns1__listWrapperURLs*              ns1__listWrapperURLs,
    // response parameters:
    _ns1__listWrapperURLsResponse*      ns1__listWrapperURLsResponse
  );
@endcode

C++ proxy class (defined in soapGSNWebServiceSoap11BindingProxy.h):
@code
  class GSNWebServiceSoap11BindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapGSNWebServiceSoap11BindingService.h):
@code
  class GSNWebServiceSoap11BindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns5  service method-style:	listWrapperURLs document
//gsoap ns5  service method-encoding:	listWrapperURLs literal
//gsoap ns5  service method-action:	listWrapperURLs urn:listWrapperURLs
//gsoap ns5  service method-output-action:	listWrapperURLs http://standard.webservice.gsn/GSNWebServicePortType/listWrapperURLsResponse
int __ns5__listWrapperURLs(
    _ns1__listWrapperURLs*              ns1__listWrapperURLs,	///< Request parameter
    _ns1__listWrapperURLsResponse*      ns1__listWrapperURLsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns2 Top-level root elements of schema "http://standard.webservice.gsn/xsd"

@section ns3 Top-level root elements of schema "http://datarequest.http.gsn/xsd"

@section ns1 Top-level root elements of schema "http://standard.webservice.gsn"

  - <ns1:getContainerInfo> @ref _ns1__getContainerInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getContainerInfo(struct soap*, _ns1__getContainerInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getContainerInfo(struct soap*, _ns1__getContainerInfo*);
    @endcode

  - <ns1:getContainerInfoResponse> @ref _ns1__getContainerInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getContainerInfoResponse(struct soap*, _ns1__getContainerInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getContainerInfoResponse(struct soap*, _ns1__getContainerInfoResponse*);
    @endcode

  - <ns1:getLatestMultiData> @ref _ns1__getLatestMultiData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getLatestMultiData(struct soap*, _ns1__getLatestMultiData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getLatestMultiData(struct soap*, _ns1__getLatestMultiData*);
    @endcode

  - <ns1:getLatestMultiDataResponse> @ref _ns1__getLatestMultiDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getLatestMultiDataResponse(struct soap*, _ns1__getLatestMultiDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getLatestMultiDataResponse(struct soap*, _ns1__getLatestMultiDataResponse*);
    @endcode

  - <ns1:getMultiData> @ref _ns1__getMultiData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getMultiData(struct soap*, _ns1__getMultiData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getMultiData(struct soap*, _ns1__getMultiData*);
    @endcode

  - <ns1:getMultiDataResponse> @ref _ns1__getMultiDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getMultiDataResponse(struct soap*, _ns1__getMultiDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getMultiDataResponse(struct soap*, _ns1__getMultiDataResponse*);
    @endcode

  - <ns1:getNextData> @ref _ns1__getNextData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getNextData(struct soap*, _ns1__getNextData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getNextData(struct soap*, _ns1__getNextData*);
    @endcode

  - <ns1:getNextDataResponse> @ref _ns1__getNextDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getNextDataResponse(struct soap*, _ns1__getNextDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getNextDataResponse(struct soap*, _ns1__getNextDataResponse*);
    @endcode

  - <ns1:getVirtualSensorsDetails> @ref _ns1__getVirtualSensorsDetails
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getVirtualSensorsDetails(struct soap*, _ns1__getVirtualSensorsDetails*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getVirtualSensorsDetails(struct soap*, _ns1__getVirtualSensorsDetails*);
    @endcode

  - <ns1:getVirtualSensorsDetailsResponse> @ref _ns1__getVirtualSensorsDetailsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getVirtualSensorsDetailsResponse(struct soap*, _ns1__getVirtualSensorsDetailsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getVirtualSensorsDetailsResponse(struct soap*, _ns1__getVirtualSensorsDetailsResponse*);
    @endcode

  - <ns1:listVirtualSensorNames> @ref _ns1__listVirtualSensorNames
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__listVirtualSensorNames(struct soap*, _ns1__listVirtualSensorNames*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__listVirtualSensorNames(struct soap*, _ns1__listVirtualSensorNames*);
    @endcode

  - <ns1:listVirtualSensorNamesResponse> @ref _ns1__listVirtualSensorNamesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__listVirtualSensorNamesResponse(struct soap*, _ns1__listVirtualSensorNamesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__listVirtualSensorNamesResponse(struct soap*, _ns1__listVirtualSensorNamesResponse*);
    @endcode

  - <ns1:listWrapperURLs> @ref _ns1__listWrapperURLs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__listWrapperURLs(struct soap*, _ns1__listWrapperURLs*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__listWrapperURLs(struct soap*, _ns1__listWrapperURLs*);
    @endcode

  - <ns1:listWrapperURLsResponse> @ref _ns1__listWrapperURLsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__listWrapperURLsResponse(struct soap*, _ns1__listWrapperURLsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__listWrapperURLsResponse(struct soap*, _ns1__listWrapperURLsResponse*);
    @endcode

  - <ns1:createVirtualSensor> @ref _ns1__createVirtualSensor
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__createVirtualSensor(struct soap*, _ns1__createVirtualSensor*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__createVirtualSensor(struct soap*, _ns1__createVirtualSensor*);
    @endcode

  - <ns1:createVirtualSensorResponse> @ref _ns1__createVirtualSensorResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__createVirtualSensorResponse(struct soap*, _ns1__createVirtualSensorResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__createVirtualSensorResponse(struct soap*, _ns1__createVirtualSensorResponse*);
    @endcode

  - <ns1:deleteVirtualSensor> @ref _ns1__deleteVirtualSensor
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__deleteVirtualSensor(struct soap*, _ns1__deleteVirtualSensor*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__deleteVirtualSensor(struct soap*, _ns1__deleteVirtualSensor*);
    @endcode

  - <ns1:deleteVirtualSensorResponse> @ref _ns1__deleteVirtualSensorResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__deleteVirtualSensorResponse(struct soap*, _ns1__deleteVirtualSensorResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__deleteVirtualSensorResponse(struct soap*, _ns1__deleteVirtualSensorResponse*);
    @endcode

  - <ns1:registerQuery> @ref _ns1__registerQuery
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__registerQuery(struct soap*, _ns1__registerQuery*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__registerQuery(struct soap*, _ns1__registerQuery*);
    @endcode

  - <ns1:registerQueryResponse> @ref _ns1__registerQueryResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__registerQueryResponse(struct soap*, _ns1__registerQueryResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__registerQueryResponse(struct soap*, _ns1__registerQueryResponse*);
    @endcode

  - <ns1:unregisterQuery> @ref _ns1__unregisterQuery
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__unregisterQuery(struct soap*, _ns1__unregisterQuery*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__unregisterQuery(struct soap*, _ns1__unregisterQuery*);
    @endcode

  - <ns1:unregisterQueryResponse> @ref _ns1__unregisterQueryResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__unregisterQueryResponse(struct soap*, _ns1__unregisterQueryResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__unregisterQueryResponse(struct soap*, _ns1__unregisterQueryResponse*);
    @endcode

*/

/* End of GSNWebService.h */
