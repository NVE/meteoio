/* soapStub.h
   Generated by gSOAP 2.7.9l from GSNWebService.h
   Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_ns2__GSNWebService_USCOREDetailsType
#define SOAP_TYPE_ns2__GSNWebService_USCOREDetailsType (47)
/* ns2:GSNWebService_DetailsType */
enum ns2__GSNWebService_USCOREDetailsType {ns2__GSNWebService_USCOREDetailsType__INFO = 0, ns2__GSNWebService_USCOREDetailsType__PROCESSOR = 1, ns2__GSNWebService_USCOREDetailsType__ADDRESSING = 2, ns2__GSNWebService_USCOREDetailsType__OUTPUTSTRUCTURE = 3, ns2__GSNWebService_USCOREDetailsType__WRAPPER = 4};
#endif

/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare */

#endif



#ifndef SOAP_TYPE_ns2__GSNWebService_USCOREACDetails
#define SOAP_TYPE_ns2__GSNWebService_USCOREACDetails (7)
/* ns2:GSNWebService_ACDetails */
class SOAP_CMAC ns2__GSNWebService_USCOREACDetails
{
public:
	std::string username;	/* required element of type xsd:string */
	std::string password;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 7; } /* = unique id SOAP_TYPE_ns2__GSNWebService_USCOREACDetails */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__GSNWebService_USCOREACDetails() : soap(NULL) { }
	virtual ~ns2__GSNWebService_USCOREACDetails() { }
};
#endif

#ifndef SOAP_TYPE_ns2__GSNWebService_USCOREContainerDetails
#define SOAP_TYPE_ns2__GSNWebService_USCOREContainerDetails (8)
/* ns2:GSNWebService_ContainerDetails */
class SOAP_CMAC ns2__GSNWebService_USCOREContainerDetails
{
public:
	int port;	/* required element of type xsd:int */
	int *sslPort;	/* optional element of type xsd:int */
	std::string *author;	/* optional element of type xsd:string */
	std::string *description;	/* optional element of type xsd:string */
	std::string *email;	/* optional element of type xsd:string */
	std::string *name;	/* optional element of type xsd:string */
	std::string *sslKeyPassword;	/* optional element of type xsd:string */
	std::string *sslKeystorePassword;	/* optional element of type xsd:string */
	std::string *timeFormat;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_ns2__GSNWebService_USCOREContainerDetails */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__GSNWebService_USCOREContainerDetails() : port(0), sslPort(NULL), author(NULL), description(NULL), email(NULL), name(NULL), sslKeyPassword(NULL), sslKeystorePassword(NULL), timeFormat(NULL), soap(NULL) { }
	virtual ~ns2__GSNWebService_USCOREContainerDetails() { }
};
#endif

#ifndef SOAP_TYPE_ns2__GSNWebService_USCOREFieldSelector
#define SOAP_TYPE_ns2__GSNWebService_USCOREFieldSelector (9)
/* ns2:GSNWebService_FieldSelector */
class SOAP_CMAC ns2__GSNWebService_USCOREFieldSelector
{
public:
	std::vector<std::string >fieldNames;	/* optional element of type xsd:string */
	std::string vsname;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_ns2__GSNWebService_USCOREFieldSelector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__GSNWebService_USCOREFieldSelector() : soap(NULL) { }
	virtual ~ns2__GSNWebService_USCOREFieldSelector() { }
};
#endif

#ifndef SOAP_TYPE_ns2__GSNWebService_USCOREQueryResult
#define SOAP_TYPE_ns2__GSNWebService_USCOREQueryResult (10)
/* ns2:GSNWebService_QueryResult */
class SOAP_CMAC ns2__GSNWebService_USCOREQueryResult
{
public:
	class ns2__GSNWebService_USCOREStreamElement *format;	/* optional element of type ns2:GSNWebService_StreamElement */
	std::vector<ns2__GSNWebService_USCOREStreamElement * >streamElements;	/* optional element of type ns2:GSNWebService_StreamElement */
	std::string *executedQuery;	/* optional element of type xsd:string */
	bool hasNext;	/* required attribute */
	std::string vsname;	/* required attribute */
	std::string sid;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_ns2__GSNWebService_USCOREQueryResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__GSNWebService_USCOREQueryResult() : format(NULL), executedQuery(NULL), hasNext((bool)0), soap(NULL) { }
	virtual ~ns2__GSNWebService_USCOREQueryResult() { }
};
#endif

#ifndef SOAP_TYPE_ns2__GSNWebService_USCOREStreamElement
#define SOAP_TYPE_ns2__GSNWebService_USCOREStreamElement (11)
/* ns2:GSNWebService_StreamElement */
class SOAP_CMAC ns2__GSNWebService_USCOREStreamElement
{
public:
	std::vector<class ns2__GSNWebService_USCOREDataField * >field;	/* optional element of type ns2:GSNWebService_DataField */
	std::string *timed;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_ns2__GSNWebService_USCOREStreamElement */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__GSNWebService_USCOREStreamElement() : timed(NULL), soap(NULL) { }
	virtual ~ns2__GSNWebService_USCOREStreamElement() { }
};
#endif

#ifndef SOAP_TYPE_ns2__GSNWebService_USCOREVirtualSensorDetails
#define SOAP_TYPE_ns2__GSNWebService_USCOREVirtualSensorDetails (13)
/* ns2:GSNWebService_VirtualSensorDetails */
class SOAP_CMAC ns2__GSNWebService_USCOREVirtualSensorDetails
{
public:
	class ns2__GSNWebService_USCOREConfAddressing *addressing;	/* optional element of type ns2:GSNWebService_ConfAddressing */
	class ns2__GSNWebService_USCOREConfInfo *info;	/* optional element of type ns2:GSNWebService_ConfInfo */
	class ns2__GSNWebService_USCOREConfOutputStructure *outputStructure;	/* optional element of type ns2:GSNWebService_ConfOutputStructure */
	class ns2__GSNWebService_USCOREConfProcessor *processor;	/* optional element of type ns2:GSNWebService_ConfProcessor */
	class ns2__GSNWebService_USCOREConfWrapper *wrapper;	/* optional element of type ns2:GSNWebService_ConfWrapper */
	std::string vsname;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_ns2__GSNWebService_USCOREVirtualSensorDetails */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__GSNWebService_USCOREVirtualSensorDetails() : addressing(NULL), info(NULL), outputStructure(NULL), processor(NULL), wrapper(NULL), soap(NULL) { }
	virtual ~ns2__GSNWebService_USCOREVirtualSensorDetails() { }
};
#endif

#ifndef SOAP_TYPE_ns2__GSNWebService_USCOREConfAddressing
#define SOAP_TYPE_ns2__GSNWebService_USCOREConfAddressing (14)
/* ns2:GSNWebService_ConfAddressing */
class SOAP_CMAC ns2__GSNWebService_USCOREConfAddressing
{
public:
	std::vector<class ns2__GSNWebService_USCOREConfPredicate * >predicates;	/* optional element of type ns2:GSNWebService_ConfPredicate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_ns2__GSNWebService_USCOREConfAddressing */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__GSNWebService_USCOREConfAddressing() : soap(NULL) { }
	virtual ~ns2__GSNWebService_USCOREConfAddressing() { }
};
#endif

#ifndef SOAP_TYPE_ns2__GSNWebService_USCOREConfInfo
#define SOAP_TYPE_ns2__GSNWebService_USCOREConfInfo (16)
/* ns2:GSNWebService_ConfInfo */
class SOAP_CMAC ns2__GSNWebService_USCOREConfInfo
{
public:
	std::string *author;	/* optional element of type xsd:string */
	std::string *description;	/* optional element of type xsd:string */
	std::string *email;	/* optional element of type xsd:string */
	std::string *rate;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_ns2__GSNWebService_USCOREConfInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__GSNWebService_USCOREConfInfo() : author(NULL), description(NULL), email(NULL), rate(NULL), soap(NULL) { }
	virtual ~ns2__GSNWebService_USCOREConfInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns2__GSNWebService_USCOREConfOutputStructure
#define SOAP_TYPE_ns2__GSNWebService_USCOREConfOutputStructure (17)
/* ns2:GSNWebService_ConfOutputStructure */
class SOAP_CMAC ns2__GSNWebService_USCOREConfOutputStructure
{
public:
	std::vector<ns2__GSNWebService_USCOREDataField * >fields;	/* optional element of type ns2:GSNWebService_DataField */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_ns2__GSNWebService_USCOREConfOutputStructure */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__GSNWebService_USCOREConfOutputStructure() : soap(NULL) { }
	virtual ~ns2__GSNWebService_USCOREConfOutputStructure() { }
};
#endif

#ifndef SOAP_TYPE_ns2__GSNWebService_USCOREConfProcessor
#define SOAP_TYPE_ns2__GSNWebService_USCOREConfProcessor (18)
/* ns2:GSNWebService_ConfProcessor */
class SOAP_CMAC ns2__GSNWebService_USCOREConfProcessor
{
public:
	std::vector<ns2__GSNWebService_USCOREConfPredicate * >initParams;	/* optional element of type ns2:GSNWebService_ConfPredicate */
	std::string className;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_ns2__GSNWebService_USCOREConfProcessor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__GSNWebService_USCOREConfProcessor() : soap(NULL) { }
	virtual ~ns2__GSNWebService_USCOREConfProcessor() { }
};
#endif

#ifndef SOAP_TYPE_ns2__GSNWebService_USCOREConfWrapper
#define SOAP_TYPE_ns2__GSNWebService_USCOREConfWrapper (19)
/* ns2:GSNWebService_ConfWrapper */
class SOAP_CMAC ns2__GSNWebService_USCOREConfWrapper
{
public:
	std::vector<class ns2__GSNWebService_USCOREWrapperDetails * >wrapperDetails;	/* optional element of type ns2:GSNWebService_WrapperDetails */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_ns2__GSNWebService_USCOREConfWrapper */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__GSNWebService_USCOREConfWrapper() : soap(NULL) { }
	virtual ~ns2__GSNWebService_USCOREConfWrapper() { }
};
#endif

#ifndef SOAP_TYPE_ns2__GSNWebService_USCOREWrapperDetails
#define SOAP_TYPE_ns2__GSNWebService_USCOREWrapperDetails (20)
/* ns2:GSNWebService_WrapperDetails */
class SOAP_CMAC ns2__GSNWebService_USCOREWrapperDetails
{
public:
	class ns2__GSNWebService_USCOREWrapperURL *wrapperURLs;	/* required element of type ns2:GSNWebService_WrapperURL */
	std::vector<ns2__GSNWebService_USCOREDataField * >outputFormat;	/* optional element of type ns2:GSNWebService_DataField */
	std::vector<ns2__GSNWebService_USCOREConfPredicate * >predicates;	/* optional element of type ns2:GSNWebService_ConfPredicate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_ns2__GSNWebService_USCOREWrapperDetails */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__GSNWebService_USCOREWrapperDetails() : wrapperURLs(NULL), soap(NULL) { }
	virtual ~ns2__GSNWebService_USCOREWrapperDetails() { }
};
#endif

#ifndef SOAP_TYPE_ns2__GSNWebService_USCOREWrapperURL
#define SOAP_TYPE_ns2__GSNWebService_USCOREWrapperURL (21)
/* ns2:GSNWebService_WrapperURL */
class SOAP_CMAC ns2__GSNWebService_USCOREWrapperURL
{
public:
	std::string virtualSensor;	/* required attribute */
	std::string source;	/* required attribute */
	std::string stream;	/* required attribute */
	std::string wrapper;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_ns2__GSNWebService_USCOREWrapperURL */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__GSNWebService_USCOREWrapperURL() : soap(NULL) { }
	virtual ~ns2__GSNWebService_USCOREWrapperURL() { }
};
#endif

#ifndef SOAP_TYPE_ns3__AbstractCriterion
#define SOAP_TYPE_ns3__AbstractCriterion (22)
/* ns3:AbstractCriterion */
class SOAP_CMAC ns3__AbstractCriterion
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_ns3__AbstractCriterion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__AbstractCriterion() : soap(NULL) { }
	virtual ~ns3__AbstractCriterion() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getContainerInfo
#define SOAP_TYPE__ns1__getContainerInfo (25)
/* ns1:getContainerInfo */
class SOAP_CMAC _ns1__getContainerInfo
{
public:
	ns2__GSNWebService_USCOREACDetails *acDetails;	/* optional element of type ns2:GSNWebService_ACDetails */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE__ns1__getContainerInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getContainerInfo() : acDetails(NULL), soap(NULL) { }
	virtual ~_ns1__getContainerInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getContainerInfoResponse
#define SOAP_TYPE__ns1__getContainerInfoResponse (26)
/* ns1:getContainerInfoResponse */
class SOAP_CMAC _ns1__getContainerInfoResponse
{
public:
	ns2__GSNWebService_USCOREContainerDetails *containerDetails;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:GSNWebService_ContainerDetails */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE__ns1__getContainerInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getContainerInfoResponse() : containerDetails(NULL), soap(NULL) { }
	virtual ~_ns1__getContainerInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getLatestMultiData
#define SOAP_TYPE__ns1__getLatestMultiData (27)
/* ns1:getLatestMultiData */
class SOAP_CMAC _ns1__getLatestMultiData
{
public:
	ns2__GSNWebService_USCOREACDetails *acDetails;	/* optional element of type ns2:GSNWebService_ACDetails */
	std::vector<ns2__GSNWebService_USCOREFieldSelector * >fieldSelector;	/* optional element of type ns2:GSNWebService_FieldSelector */
	std::string *timeFormat;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE__ns1__getLatestMultiData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getLatestMultiData() : acDetails(NULL), timeFormat(NULL), soap(NULL) { }
	virtual ~_ns1__getLatestMultiData() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getLatestMultiDataResponse
#define SOAP_TYPE__ns1__getLatestMultiDataResponse (28)
/* ns1:getLatestMultiDataResponse */
class SOAP_CMAC _ns1__getLatestMultiDataResponse
{
public:
	std::vector<ns2__GSNWebService_USCOREQueryResult * >queryResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:GSNWebService_QueryResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE__ns1__getLatestMultiDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getLatestMultiDataResponse() : soap(NULL) { }
	virtual ~_ns1__getLatestMultiDataResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getMultiData
#define SOAP_TYPE__ns1__getMultiData (29)
/* ns1:getMultiData */
class SOAP_CMAC _ns1__getMultiData
{
public:
	ns2__GSNWebService_USCOREACDetails *acDetails;	/* optional element of type ns2:GSNWebService_ACDetails */
	std::vector<ns2__GSNWebService_USCOREFieldSelector * >fieldSelector;	/* optional element of type ns2:GSNWebService_FieldSelector */
	std::vector<class ns3__StandardCriterion * >conditions;	/* optional element of type ns3:StandardCriterion */
	class ns3__AggregationCriterion *aggregation;	/* optional element of type ns3:AggregationCriterion */
	LONG64 *from;	/* optional attribute */
	LONG64 *to;	/* optional attribute */
	int *nb;	/* optional attribute */
	std::string *timeFormat;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE__ns1__getMultiData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getMultiData() : acDetails(NULL), aggregation(NULL), from(NULL), to(NULL), nb(NULL), timeFormat(NULL), soap(NULL) { }
	virtual ~_ns1__getMultiData() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getMultiDataResponse
#define SOAP_TYPE__ns1__getMultiDataResponse (30)
/* ns1:getMultiDataResponse */
class SOAP_CMAC _ns1__getMultiDataResponse
{
public:
	std::vector<ns2__GSNWebService_USCOREQueryResult * >queryResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:GSNWebService_QueryResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE__ns1__getMultiDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getMultiDataResponse() : soap(NULL) { }
	virtual ~_ns1__getMultiDataResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getNextData
#define SOAP_TYPE__ns1__getNextData (31)
/* ns1:getNextData */
class SOAP_CMAC _ns1__getNextData
{
public:
	ns2__GSNWebService_USCOREACDetails *acDetails;	/* optional element of type ns2:GSNWebService_ACDetails */
	std::string sid;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE__ns1__getNextData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getNextData() : acDetails(NULL), soap(NULL) { }
	virtual ~_ns1__getNextData() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getNextDataResponse
#define SOAP_TYPE__ns1__getNextDataResponse (32)
/* ns1:getNextDataResponse */
class SOAP_CMAC _ns1__getNextDataResponse
{
public:
	std::vector<ns2__GSNWebService_USCOREQueryResult * >queryResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:GSNWebService_QueryResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE__ns1__getNextDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getNextDataResponse() : soap(NULL) { }
	virtual ~_ns1__getNextDataResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getVirtualSensorsDetails
#define SOAP_TYPE__ns1__getVirtualSensorsDetails (33)
/* ns1:getVirtualSensorsDetails */
class SOAP_CMAC _ns1__getVirtualSensorsDetails
{
public:
	ns2__GSNWebService_USCOREACDetails *acDetails;	/* optional element of type ns2:GSNWebService_ACDetails */
	std::vector<ns2__GSNWebService_USCOREFieldSelector * >fieldSelector;	/* optional element of type ns2:GSNWebService_FieldSelector */
	std::vector<enum ns2__GSNWebService_USCOREDetailsType >detailsType;	/* optional element of type ns2:GSNWebService_DetailsType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE__ns1__getVirtualSensorsDetails */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getVirtualSensorsDetails() : acDetails(NULL), soap(NULL) { }
	virtual ~_ns1__getVirtualSensorsDetails() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getVirtualSensorsDetailsResponse
#define SOAP_TYPE__ns1__getVirtualSensorsDetailsResponse (34)
/* ns1:getVirtualSensorsDetailsResponse */
class SOAP_CMAC _ns1__getVirtualSensorsDetailsResponse
{
public:
	std::vector<ns2__GSNWebService_USCOREVirtualSensorDetails * >virtualSensorDetails;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:GSNWebService_VirtualSensorDetails */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE__ns1__getVirtualSensorsDetailsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getVirtualSensorsDetailsResponse() : soap(NULL) { }
	virtual ~_ns1__getVirtualSensorsDetailsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__listVirtualSensorNames
#define SOAP_TYPE__ns1__listVirtualSensorNames (35)
/* ns1:listVirtualSensorNames */
class SOAP_CMAC _ns1__listVirtualSensorNames
{
public:
	ns2__GSNWebService_USCOREACDetails *acDetails;	/* optional element of type ns2:GSNWebService_ACDetails */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE__ns1__listVirtualSensorNames */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__listVirtualSensorNames() : acDetails(NULL), soap(NULL) { }
	virtual ~_ns1__listVirtualSensorNames() { }
};
#endif

#ifndef SOAP_TYPE__ns1__listVirtualSensorNamesResponse
#define SOAP_TYPE__ns1__listVirtualSensorNamesResponse (36)
/* ns1:listVirtualSensorNamesResponse */
class SOAP_CMAC _ns1__listVirtualSensorNamesResponse
{
public:
	std::vector<std::string >virtualSensorName;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE__ns1__listVirtualSensorNamesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__listVirtualSensorNamesResponse() : soap(NULL) { }
	virtual ~_ns1__listVirtualSensorNamesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__listWrapperURLs
#define SOAP_TYPE__ns1__listWrapperURLs (37)
/* ns1:listWrapperURLs */
class SOAP_CMAC _ns1__listWrapperURLs
{
public:
	ns2__GSNWebService_USCOREACDetails *acDetails;	/* optional element of type ns2:GSNWebService_ACDetails */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE__ns1__listWrapperURLs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__listWrapperURLs() : acDetails(NULL), soap(NULL) { }
	virtual ~_ns1__listWrapperURLs() { }
};
#endif

#ifndef SOAP_TYPE__ns1__listWrapperURLsResponse
#define SOAP_TYPE__ns1__listWrapperURLsResponse (38)
/* ns1:listWrapperURLsResponse */
class SOAP_CMAC _ns1__listWrapperURLsResponse
{
public:
	std::vector<ns2__GSNWebService_USCOREWrapperURL * >wrapperURLs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:GSNWebService_WrapperURL */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE__ns1__listWrapperURLsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__listWrapperURLsResponse() : soap(NULL) { }
	virtual ~_ns1__listWrapperURLsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__createVirtualSensor
#define SOAP_TYPE__ns1__createVirtualSensor (39)
/* ns1:createVirtualSensor */
class SOAP_CMAC _ns1__createVirtualSensor
{
public:
	ns2__GSNWebService_USCOREACDetails *acDetails;	/* optional element of type ns2:GSNWebService_ACDetails */
	std::string descriptionFileContent;	/* required element of type xsd:string */
	std::string vsname;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE__ns1__createVirtualSensor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__createVirtualSensor() : acDetails(NULL), soap(NULL) { }
	virtual ~_ns1__createVirtualSensor() { }
};
#endif

#ifndef SOAP_TYPE__ns1__createVirtualSensorResponse
#define SOAP_TYPE__ns1__createVirtualSensorResponse (40)
/* ns1:createVirtualSensorResponse */
class SOAP_CMAC _ns1__createVirtualSensorResponse
{
public:
	bool status;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE__ns1__createVirtualSensorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__createVirtualSensorResponse() : status((bool)0), soap(NULL) { }
	virtual ~_ns1__createVirtualSensorResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__deleteVirtualSensor
#define SOAP_TYPE__ns1__deleteVirtualSensor (41)
/* ns1:deleteVirtualSensor */
class SOAP_CMAC _ns1__deleteVirtualSensor
{
public:
	ns2__GSNWebService_USCOREACDetails *acDetails;	/* optional element of type ns2:GSNWebService_ACDetails */
	std::string vsname;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE__ns1__deleteVirtualSensor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__deleteVirtualSensor() : acDetails(NULL), soap(NULL) { }
	virtual ~_ns1__deleteVirtualSensor() { }
};
#endif

#ifndef SOAP_TYPE__ns1__deleteVirtualSensorResponse
#define SOAP_TYPE__ns1__deleteVirtualSensorResponse (42)
/* ns1:deleteVirtualSensorResponse */
class SOAP_CMAC _ns1__deleteVirtualSensorResponse
{
public:
	bool status;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE__ns1__deleteVirtualSensorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__deleteVirtualSensorResponse() : status((bool)0), soap(NULL) { }
	virtual ~_ns1__deleteVirtualSensorResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__registerQuery
#define SOAP_TYPE__ns1__registerQuery (43)
/* ns1:registerQuery */
class SOAP_CMAC _ns1__registerQuery
{
public:
	ns2__GSNWebService_USCOREACDetails *acDetails;	/* optional element of type ns2:GSNWebService_ACDetails */
	std::vector<ns2__GSNWebService_USCOREDataField * >outputStructure;	/* optional element of type ns2:GSNWebService_DataField */
	std::vector<std::string >vsnames;	/* optional element of type xsd:string */
	std::string queryName;	/* required attribute */
	std::string query;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE__ns1__registerQuery */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__registerQuery() : acDetails(NULL), soap(NULL) { }
	virtual ~_ns1__registerQuery() { }
};
#endif

#ifndef SOAP_TYPE__ns1__registerQueryResponse
#define SOAP_TYPE__ns1__registerQueryResponse (44)
/* ns1:registerQueryResponse */
class SOAP_CMAC _ns1__registerQueryResponse
{
public:
	bool status;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE__ns1__registerQueryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__registerQueryResponse() : status((bool)0), soap(NULL) { }
	virtual ~_ns1__registerQueryResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__unregisterQuery
#define SOAP_TYPE__ns1__unregisterQuery (45)
/* ns1:unregisterQuery */
class SOAP_CMAC _ns1__unregisterQuery
{
public:
	ns2__GSNWebService_USCOREACDetails *acDetails;	/* optional element of type ns2:GSNWebService_ACDetails */
	std::string queryName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE__ns1__unregisterQuery */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__unregisterQuery() : acDetails(NULL), soap(NULL) { }
	virtual ~_ns1__unregisterQuery() { }
};
#endif

#ifndef SOAP_TYPE__ns1__unregisterQueryResponse
#define SOAP_TYPE__ns1__unregisterQueryResponse (46)
/* ns1:unregisterQueryResponse */
class SOAP_CMAC _ns1__unregisterQueryResponse
{
public:
	bool status;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE__ns1__unregisterQueryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__unregisterQueryResponse() : status((bool)0), soap(NULL) { }
	virtual ~_ns1__unregisterQueryResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__GSNWebService_USCOREDataField
#define SOAP_TYPE_ns2__GSNWebService_USCOREDataField (12)
/* Primitive ns2:GSNWebService_DataField schema type: */
class SOAP_CMAC ns2__GSNWebService_USCOREDataField
{
public:
	std::string __item;
	std::string *name;	/* optional attribute */
	std::string *type;	/* optional attribute */
	std::string *description;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ns2__GSNWebService_USCOREDataField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__GSNWebService_USCOREDataField() : name(NULL), type(NULL), description(NULL), soap(NULL) { }
	virtual ~ns2__GSNWebService_USCOREDataField() { }
};
#endif

#ifndef SOAP_TYPE_ns2__GSNWebService_USCOREConfPredicate
#define SOAP_TYPE_ns2__GSNWebService_USCOREConfPredicate (15)
/* Primitive ns2:GSNWebService_ConfPredicate schema type: */
class SOAP_CMAC ns2__GSNWebService_USCOREConfPredicate
{
public:
	std::string __item;
	std::string name;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_ns2__GSNWebService_USCOREConfPredicate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__GSNWebService_USCOREConfPredicate() : soap(NULL) { }
	virtual ~ns2__GSNWebService_USCOREConfPredicate() { }
};
#endif

#ifndef SOAP_TYPE_ns3__StandardCriterion
#define SOAP_TYPE_ns3__StandardCriterion (23)
/* ns3:StandardCriterion */
class SOAP_CMAC ns3__StandardCriterion : public ns3__AbstractCriterion
{
public:
	std::string critJoin;	/* required attribute */
	std::string field;	/* required attribute */
	std::string negation;	/* required attribute */
	std::string operator_;	/* required attribute */
	std::string value;	/* required attribute */
	std::string vsname;	/* required attribute */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_ns3__StandardCriterion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__StandardCriterion()  { }
	virtual ~ns3__StandardCriterion() { }
};
#endif

#ifndef SOAP_TYPE_ns3__AggregationCriterion
#define SOAP_TYPE_ns3__AggregationCriterion (24)
/* ns3:AggregationCriterion */
class SOAP_CMAC ns3__AggregationCriterion : public ns3__AbstractCriterion
{
public:
	std::string groupOperator;	/* required attribute */
	std::string timeRange;	/* required attribute */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_ns3__AggregationCriterion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__AggregationCriterion()  { }
	virtual ~ns3__AggregationCriterion() { }
};
#endif

#ifndef SOAP_TYPE___ns4__getContainerInfo
#define SOAP_TYPE___ns4__getContainerInfo (87)
/* Operation wrapper: */
struct __ns4__getContainerInfo
{
public:
	_ns1__getContainerInfo *ns1__getContainerInfo;	/* optional element of type ns1:getContainerInfo */
};
#endif

#ifndef SOAP_TYPE___ns4__getMultiData
#define SOAP_TYPE___ns4__getMultiData (91)
/* Operation wrapper: */
struct __ns4__getMultiData
{
public:
	_ns1__getMultiData *ns1__getMultiData;	/* optional element of type ns1:getMultiData */
};
#endif

#ifndef SOAP_TYPE___ns4__listVirtualSensorNames
#define SOAP_TYPE___ns4__listVirtualSensorNames (95)
/* Operation wrapper: */
struct __ns4__listVirtualSensorNames
{
public:
	_ns1__listVirtualSensorNames *ns1__listVirtualSensorNames;	/* optional element of type ns1:listVirtualSensorNames */
};
#endif

#ifndef SOAP_TYPE___ns4__getNextData
#define SOAP_TYPE___ns4__getNextData (99)
/* Operation wrapper: */
struct __ns4__getNextData
{
public:
	_ns1__getNextData *ns1__getNextData;	/* optional element of type ns1:getNextData */
};
#endif

#ifndef SOAP_TYPE___ns4__registerQuery
#define SOAP_TYPE___ns4__registerQuery (103)
/* Operation wrapper: */
struct __ns4__registerQuery
{
public:
	_ns1__registerQuery *ns1__registerQuery;	/* optional element of type ns1:registerQuery */
};
#endif

#ifndef SOAP_TYPE___ns4__unregisterQuery
#define SOAP_TYPE___ns4__unregisterQuery (107)
/* Operation wrapper: */
struct __ns4__unregisterQuery
{
public:
	_ns1__unregisterQuery *ns1__unregisterQuery;	/* optional element of type ns1:unregisterQuery */
};
#endif

#ifndef SOAP_TYPE___ns4__getLatestMultiData
#define SOAP_TYPE___ns4__getLatestMultiData (111)
/* Operation wrapper: */
struct __ns4__getLatestMultiData
{
public:
	_ns1__getLatestMultiData *ns1__getLatestMultiData;	/* optional element of type ns1:getLatestMultiData */
};
#endif

#ifndef SOAP_TYPE___ns4__deleteVirtualSensor
#define SOAP_TYPE___ns4__deleteVirtualSensor (115)
/* Operation wrapper: */
struct __ns4__deleteVirtualSensor
{
public:
	_ns1__deleteVirtualSensor *ns1__deleteVirtualSensor;	/* optional element of type ns1:deleteVirtualSensor */
};
#endif

#ifndef SOAP_TYPE___ns4__getVirtualSensorsDetails
#define SOAP_TYPE___ns4__getVirtualSensorsDetails (119)
/* Operation wrapper: */
struct __ns4__getVirtualSensorsDetails
{
public:
	_ns1__getVirtualSensorsDetails *ns1__getVirtualSensorsDetails;	/* optional element of type ns1:getVirtualSensorsDetails */
};
#endif

#ifndef SOAP_TYPE___ns4__createVirtualSensor
#define SOAP_TYPE___ns4__createVirtualSensor (123)
/* Operation wrapper: */
struct __ns4__createVirtualSensor
{
public:
	_ns1__createVirtualSensor *ns1__createVirtualSensor;	/* optional element of type ns1:createVirtualSensor */
};
#endif

#ifndef SOAP_TYPE___ns4__listWrapperURLs
#define SOAP_TYPE___ns4__listWrapperURLs (127)
/* Operation wrapper: */
struct __ns4__listWrapperURLs
{
public:
	_ns1__listWrapperURLs *ns1__listWrapperURLs;	/* optional element of type ns1:listWrapperURLs */
};
#endif

#ifndef SOAP_TYPE___ns5__getContainerInfo
#define SOAP_TYPE___ns5__getContainerInfo (129)
/* Operation wrapper: */
struct __ns5__getContainerInfo
{
public:
	_ns1__getContainerInfo *ns1__getContainerInfo;	/* optional element of type ns1:getContainerInfo */
};
#endif

#ifndef SOAP_TYPE___ns5__getMultiData
#define SOAP_TYPE___ns5__getMultiData (131)
/* Operation wrapper: */
struct __ns5__getMultiData
{
public:
	_ns1__getMultiData *ns1__getMultiData;	/* optional element of type ns1:getMultiData */
};
#endif

#ifndef SOAP_TYPE___ns5__listVirtualSensorNames
#define SOAP_TYPE___ns5__listVirtualSensorNames (133)
/* Operation wrapper: */
struct __ns5__listVirtualSensorNames
{
public:
	_ns1__listVirtualSensorNames *ns1__listVirtualSensorNames;	/* optional element of type ns1:listVirtualSensorNames */
};
#endif

#ifndef SOAP_TYPE___ns5__getNextData
#define SOAP_TYPE___ns5__getNextData (135)
/* Operation wrapper: */
struct __ns5__getNextData
{
public:
	_ns1__getNextData *ns1__getNextData;	/* optional element of type ns1:getNextData */
};
#endif

#ifndef SOAP_TYPE___ns5__registerQuery
#define SOAP_TYPE___ns5__registerQuery (137)
/* Operation wrapper: */
struct __ns5__registerQuery
{
public:
	_ns1__registerQuery *ns1__registerQuery;	/* optional element of type ns1:registerQuery */
};
#endif

#ifndef SOAP_TYPE___ns5__unregisterQuery
#define SOAP_TYPE___ns5__unregisterQuery (139)
/* Operation wrapper: */
struct __ns5__unregisterQuery
{
public:
	_ns1__unregisterQuery *ns1__unregisterQuery;	/* optional element of type ns1:unregisterQuery */
};
#endif

#ifndef SOAP_TYPE___ns5__getLatestMultiData
#define SOAP_TYPE___ns5__getLatestMultiData (141)
/* Operation wrapper: */
struct __ns5__getLatestMultiData
{
public:
	_ns1__getLatestMultiData *ns1__getLatestMultiData;	/* optional element of type ns1:getLatestMultiData */
};
#endif

#ifndef SOAP_TYPE___ns5__deleteVirtualSensor
#define SOAP_TYPE___ns5__deleteVirtualSensor (143)
/* Operation wrapper: */
struct __ns5__deleteVirtualSensor
{
public:
	_ns1__deleteVirtualSensor *ns1__deleteVirtualSensor;	/* optional element of type ns1:deleteVirtualSensor */
};
#endif

#ifndef SOAP_TYPE___ns5__getVirtualSensorsDetails
#define SOAP_TYPE___ns5__getVirtualSensorsDetails (145)
/* Operation wrapper: */
struct __ns5__getVirtualSensorsDetails
{
public:
	_ns1__getVirtualSensorsDetails *ns1__getVirtualSensorsDetails;	/* optional element of type ns1:getVirtualSensorsDetails */
};
#endif

#ifndef SOAP_TYPE___ns5__createVirtualSensor
#define SOAP_TYPE___ns5__createVirtualSensor (147)
/* Operation wrapper: */
struct __ns5__createVirtualSensor
{
public:
	_ns1__createVirtualSensor *ns1__createVirtualSensor;	/* optional element of type ns1:createVirtualSensor */
};
#endif

#ifndef SOAP_TYPE___ns5__listWrapperURLs
#define SOAP_TYPE___ns5__listWrapperURLs (149)
/* Operation wrapper: */
struct __ns5__listWrapperURLs
{
public:
	_ns1__listWrapperURLs *ns1__listWrapperURLs;	/* optional element of type ns1:listWrapperURLs */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (150)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (151)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (153)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (156)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (157)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (4)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
