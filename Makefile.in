#
# Makefile for the METEOIO Library
#
#Destination system: either zeus, grid or safe

#Prefix: 	@prefix@

####### USER CONFIGURATION
# build mode: release or debug
MODE	 = @MODE@

# plugins to build (yes/no)
BORMAIO 	= @BORMAIO@
IMISIO		= @IMISIO@
GEOTOPIO	= @GEOTOPIO@
GSNIO		= @GSNIO@
SNIO		= @SNIO@
SMETIO		= @SMETIO@
ARCIO		= @ARCIO@
GRASSIO		= @GRASSIO@
PROJ4		= @PROJ4@

####### COMPILERS AND OPTIONS
#SVNREV_GEN	= $(shell main/version.sh)
#SVNREV		= $(eval SVNREV := $(SVNREV_GEN))$(SVNREV)
SVNREV		= 0.0

CC		= @CC@ -DGNU -DLINUX -D_USE_MATH_DEFINES
CXX		= @CXX@ -DGNU -DLINUX -D_USE_MATH_DEFINES
LINKER		= @CXX@ -DGNU
POPCC		= popcc

DEBUG		= -g -O0 #-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC #-dr
#debug_arithm	= -DDEBUG_ARITHM -g
WARNING		= @WARNING@ @EXTRA_WARN@ #-Weffc++ #-pedantic-errors #-Werror
ARCH		= @ARCH@
OPTIM		= @OPTIM@
MAKE_OPTIM	= @MAKE_OPTIM@

ifeq ($(MODE),debug)		#for debug
	CFLAGS   = $(debug_arithm) $(MAKE_OPTIM) $(ARCH) $(DEBUG) $(WARNING)
	CCFLAGS  = $(debug_arithm) $(MAKE_OPTIM) $(ARCH) $(DEBUG) $(WARNING)
	FFLAGS	 = $(debug_arithm) $(MAKE_OPTIM) $(DEBUG) $(WARNING)
else				#for release
	CFLAGS   = $(debug_arithm) $(MAKE_OPTIM) $(ARCH) $(OPTIM) $(WARNING)
	CCFLAGS  = $(debug_arithm) $(MAKE_OPTIM) $(ARCH) $(OPTIM) $(WARNING)
	FFLAGS	 = $(debug_arithm) $(MAKE_OPTIM) $(FFOPTIM) $(WARNING)
endif
#CCFLAGS += -DSVNREV="\"$(SVNREV)\""
CCFLAGS += -D_VERSION="\"$(SVNREV)\""

#################################################
# END USER OPTIONS
#################################################

####### DIRECTORIES
TARGET		= meteoio
#TARGET_POPC	= meteoio_par
SRCDIR		= ./meteoio
PLUGINDIR	= ./meteoio/plugins
LIBDIR		= ./lib
TOOLSDIR	= ./tools
export prefix		= @prefix@
export exec_prefix	= @exec_prefix@

LIBS		= -lc -ldl -lm -lstdc++
LDFLAGS_SEQ	= -L$(LIBDIR) -lmeteoio
LD_POPC		= -L$(LIBDIR) -lmeteoiopopc
LDFLAGS_POPC	= $(LD_POPC)
LDFLAGS		= $(LIBS) -rdynamic
INCLUDE		= -I.
ifeq ($(PROJ4),yes)
#warning: this is a bug on architectures other than ix386: one can not mix PIC and PDC code
	PROJ4_STATIC =  @PROJ4_LIBS@
	CCFLAGS += -DPROJ4
endif

######## Sources, objects, headers
METEOIO_OBJ =   $(SRCDIR)/IOManager.o \
		$(SRCDIR)/Matrix.o \
		$(SRCDIR)/IOPlugin.o \
		$(SRCDIR)/MeteoProcessor.o \
		$(SRCDIR)/ResamplingAlgorithms.o \
		$(SRCDIR)/ResamplingAlgorithms2D.o \
		$(SRCDIR)/Meteo1DInterpolator.o \
		$(SRCDIR)/InterpolationAlgorithms.o \
		$(SRCDIR)/A3DIO.o \
		$(SRCDIR)/Date.o \
		$(SRCDIR)/Timer.o \
		$(SRCDIR)/Grid2DObject.o \
		$(SRCDIR)/IOHandler.o \
		$(SRCDIR)/Coords.o \
		$(SRCDIR)/Meteo2DInterpolator.o \
		$(SRCDIR)/BufferedIOHandler.o \
		$(SRCDIR)/DEMObject.o \
		$(SRCDIR)/Grid3DObject.o \
		$(SRCDIR)/IOInterface.o \
		$(SRCDIR)/StationData.o \
		$(SRCDIR)/Config.o \
		$(SRCDIR)/DynamicLibrary.o \
		$(SRCDIR)/IOExceptions.o \
		$(SRCDIR)/IOUtils.o \
		$(SRCDIR)/MeteoData.o \
		$(SRCDIR)/meteofilters/FilterMin.o \
		$(SRCDIR)/meteofilters/FilterMax.o \
		$(SRCDIR)/meteofilters/FilterMinMax.o \
		$(SRCDIR)/meteofilters/FilterMedianAvg.o \
		$(SRCDIR)/meteofilters/FilterMeanAvg.o \
		$(SRCDIR)/meteofilters/FilterWindAvg.o \
		$(SRCDIR)/meteofilters/FilterStdDev.o \
		$(SRCDIR)/meteofilters/FilterTukey.o \
		$(SRCDIR)/meteofilters/RateFilter.o \
		$(SRCDIR)/meteofilters/FilterBlock.o \
		$(SRCDIR)/meteofilters/WindowedFilter.o \
		$(SRCDIR)/meteofilters/ProcessingBlock.o \
		$(SRCDIR)/meteofilters/ProcessingStack.o \
		$(SRCDIR)/meteolaws/Atmosphere.o \
		$(SRCDIR)/meteolaws/Suntrajectory.o \
		$(SRCDIR)/meteolaws/Sun.o \
		$(SRCDIR)/meteostats/libfit1D.o \
		$(SRCDIR)/meteostats/libfit1DCore.o \
		$(SRCDIR)/meteostats/libinterpol1D.o \
		$(SRCDIR)/meteostats/libinterpol2D.o

METEOIO_OBJ_POPC = $(SRCDIR)/marshal_meteoio_par.o \
		$(SRCDIR)/IOManager_par.o \
		$(SRCDIR)/Matrix_par.o \
		$(SRCDIR)/IOPlugin_par.o \
		$(SRCDIR)/MeteoProcessor_par.o \
		$(SRCDIR)/ResamplingAlgorithms_par.o \
		$(SRCDIR)/ResamplingAlgorithms2D_par.o \
		$(SRCDIR)/Meteo1DInterpolator_par.o \
		$(SRCDIR)/InterpolationAlgorithms_par.o \
		$(SRCDIR)/A3DIO_par.o \
		$(SRCDIR)/Date_par.o \
		$(SRCDIR)/Timer_par.o \
		$(SRCDIR)/Grid2DObject_par.o \
		$(SRCDIR)/IOHandler_par.o \
		$(SRCDIR)/Coords_par.o \
		$(SRCDIR)/Meteo2DInterpolator_par.o \
		$(SRCDIR)/BufferedIOHandler_par.o \
		$(SRCDIR)/DEMObject_par.o \
		$(SRCDIR)/Grid3DObject_par.o \
		$(SRCDIR)/IOInterface_par.o \
		$(SRCDIR)/StationData_par.o \
		$(SRCDIR)/Config_par.o \
		$(SRCDIR)/DynamicLibrary_par.o \
		$(SRCDIR)/IOExceptions_par.o \
		$(SRCDIR)/IOUtils_par.o \
		$(SRCDIR)/MeteoData_par.o \
		$(SRCDIR)/meteofilters/FilterMin_par.o \
		$(SRCDIR)/meteofilters/FilterMax_par.o \
		$(SRCDIR)/meteofilters/FilterMinMax_par.o \
		$(SRCDIR)/meteofilters/FilterMedianAvg_par.o \
		$(SRCDIR)/meteofilters/FilterMeanAvg_par.o \
		$(SRCDIR)/meteofilters/FilterWindAvg_par.o \
		$(SRCDIR)/meteofilters/FilterStdDev_par.o \
		$(SRCDIR)/meteofilters/FilterTukey_par.o \
		$(SRCDIR)/meteofilters/RateFilter_par.o \
		$(SRCDIR)/meteofilters/FilterBlock_par.o \
		$(SRCDIR)/meteofilters/WindowedFilter_par.o \
		$(SRCDIR)/meteofilters/ProcessingBlock_par.o \
		$(SRCDIR)/meteofilters/ProcessingStack_par.o \
		$(SRCDIR)/meteolaws/Atmosphere_par.o \
		$(SRCDIR)/meteolaws/Suntrajectory_par.o \
		$(SRCDIR)/meteolaws/Sun_par.o \
		$(SRCDIR)/meteostats/libfit1D_par.o \
		$(SRCDIR)/meteostats/libfit1DCore_par.o \
		$(SRCDIR)/meteostats/libinterpol1D_par.o \
		$(SRCDIR)/meteostats/libinterpol2D_par.o

TOOLS_OBJ =	$(TOOLSDIR)/createA3DFiles.o

####### Build rules SEQ

all: seq
	@echo -e "*** MeteoIO compiled as \033[36m$(MODE)\033[0m"

help:
	@echo -e "MeteoIO Makefile targets:"
	@echo -e " \033[36mseq\033[0m"
	@echo -e " \033[36mcreateA3DFiles\033[0m"
	@echo -e " \033[36mpar\033[0m"
	@echo -e " \033[36minstall\033[0m"
	@echo -e " \033[36mclean\033[0m"
	@echo -e " \033[36mdistclean\033[0m"
	@echo -e " \033[36mdocumentation\033[0m"

seq: $(LIBDIR)/libmeteoio.a build_dynamiclibs

build_dynamiclibs: $(LIBDIR)/plugins/libbormaio.so \
			$(LIBDIR)/plugins/libimisio.so \
			$(LIBDIR)/plugins/libgeotopio.so \
			$(LIBDIR)/plugins/libgsnio.so \
			$(LIBDIR)/plugins/libsnio.so \
			$(LIBDIR)/plugins/libsmetio.so \
			$(LIBDIR)/plugins/libarcio.so \
			$(LIBDIR)/plugins/libgrassio.so

############## POPC ##############
par: $(LIBDIR)/libmeteoiopopc.a  build_dynamiclibs_par meteoIO_module_par
	@echo -e "*** MeteoIO-Popc+ compiled as \033[36m$(MODE)\033[0m"

build_dynamiclibs_par:  $(LIBDIR)/plugins/libarciopopc.so \
			$(LIBDIR)/plugins/libsmetiopopc.so \
			$(LIBDIR)/plugins/libsniopopc.so \
			$(LIBDIR)/plugins/libimisiopopc.so \
			$(LIBDIR)/plugins/libgrassiopopc.so

meteoIO_module_par: #$(LIBDIR)/meteoio.module
##############  END  ##############

clean:
	-rm -f $(SRCDIR)/*~ $(SRCDIR)/*.o $(TOOLSDIR)/*.o
	-rm -f $(PLUGINDIR)/*~ $(PLUGINDIR)/*.o
	-rm -f $(SRCDIR)/meteolaws/*~ $(SRCDIR)/meteolaws/*.o
	-rm -f $(SRCDIR)/meteofilters/*~ $(SRCDIR)/meteofilters/*.o
	-rm -f $(SRCDIR)/meteostats/*~ $(SRCDIR)/meteostats/*.o
#	cd $(PLUGINDIR)/gsn; make clean

distclean: clean
	-rm -f $(TOOLSDIR)/createA3DFiles
	-rm -f $(LIBDIR)/*.a $(LIBDIR)/*.so $(LIBDIR)/*.module

.PHONY: install
install:
	@echo **** Installing MeteoIO
	mkdir -p @includedir@/meteoio
	mkdir -p @includedir@/meteoio/meteofilters
	mkdir -p @includedir@/meteoio/meteolaws
	mkdir -p @includedir@/meteoio/meteostats
	mkdir -p @libdir@
	mkdir -p @libdir@/meteoio/plugins
	cp ${SRCDIR}/*.h @includedir@/meteoio
	cp ${SRCDIR}/*.ph @includedir@/meteoio
	cp ${SRCDIR}/meteofilters/*.h @includedir@/meteoio/meteofilters
	cp ${SRCDIR}/meteolaws/*.h @includedir@/meteoio/meteolaws
	cp ${SRCDIR}/meteostats/*.h @includedir@/meteoio/meteostats
	-cp lib/libmeteoio* @libdir@
	-cp lib/plugins/*.so @libdir@/meteoio/plugins
	#-cp lib/*.module @libdir@/meteoio

documentation:
	doxygen $(SRCDIR)/config.dox

####### Compile

.cc.o: $*.cc $*.h
	$(CXX) $(CCFLAGS) -fPIC -c $< $(INCLUDE) -o $@

%_par.o : %.cc
	$(POPCC) $(CCFLAGS) -fPIC -c $< $(INCLUDE) -o $@

%.stub.o : %.ph
	$(POPCC) $(CCFLAGS) -fPIC -c $< $(INCLUDE) -o $@


$(LIBDIR)/libmeteoio.a: $(METEOIO_OBJ)
	@echo -e **** Compiling libmeteoIO
	ar -r $@ $(METEOIO_OBJ) $(PROJ4_STATIC)
	ranlib $@

$(LIBDIR)/libmeteoiopopc.a:  $(METEOIO_OBJ_POPC)
	@echo -e **** Compiling libmeteoIOpopc
	ar -r $@ $(METEOIO_OBJ_POPC) $(PROJ4_STATIC)
	ranlib $@

# Dynamic libraries seq

$(LIBDIR)/plugins/libbormaio.so: $(PLUGINDIR)/BormaIO.cc $(PLUGINDIR)/BormaIO.h $(LIBDIR)/libmeteoio.a
ifeq ($(BORMAIO),yes)
	@echo **** Compiling Borma plugin
	$(CXX) $(CCFLAGS) -fPIC $(INCLUDE) @XMLPP_CFLAGS@ -c -o $(PLUGINDIR)/BormaIO.o $(PLUGINDIR)/BormaIO.cc
	$(CXX) $(CCFLAGS) -rdynamic -shared -Wl,-soname,libbormaio.so -o $@ $(PLUGINDIR)/BormaIO.o $(LDFLAGS) @XMLPP_LIBS@
endif

$(LIBDIR)/plugins/libgeotopio.so:$(PLUGINDIR)/GeotopIO.cc $(PLUGINDIR)/GeotopIO.h $(LIBDIR)/libmeteoio.a
ifeq ($(GEOTOPIO),yes)
	@echo **** Compiling GeoTOP plugin
	$(CXX) $(CCFLAGS) -fPIC $(INCLUDE) -c -o $(PLUGINDIR)/GeotopIO.o $(PLUGINDIR)/GeotopIO.cc
	$(CXX) $(CCFLAGS) -rdynamic -shared -Wl,-soname,libgeotopio.so -o $@ $(PLUGINDIR)/GeotopIO.o $(LDFLAGS)
endif

$(LIBDIR)/plugins/libsnio.so:$(PLUGINDIR)/SNIO.cc $(PLUGINDIR)/SNIO.h $(LIBDIR)/libmeteoio.a
ifeq ($(SNIO),yes)
	@echo **** Compiling SNOWPACK plugin
	$(CXX) $(CCFLAGS) -fPIC $(INCLUDE) -c -o $(PLUGINDIR)/SNIO.o $(PLUGINDIR)/SNIO.cc
	$(CXX) $(CCFLAGS) -rdynamic -shared -Wl,-soname,libsnio.so -o $@ $(PLUGINDIR)/SNIO.o $(LDFLAGS)
endif

$(LIBDIR)/plugins/libsmetio.so:$(PLUGINDIR)/SMETIO.cc $(PLUGINDIR)/SMETIO.h $(LIBDIR)/libmeteoio.a
ifeq ($(SMETIO),yes)
	@echo **** Compiling SMET plugin
	$(CXX) $(CCFLAGS) -fPIC $(INCLUDE) -c -o $(PLUGINDIR)/SMETIO.o $(PLUGINDIR)/SMETIO.cc
	$(CXX) $(CCFLAGS) -rdynamic -shared -Wl,-soname,libsmetio.so -o $@ $(PLUGINDIR)/SMETIO.o $(LDFLAGS)
endif

$(LIBDIR)/plugins/libarcio.so:$(PLUGINDIR)/ARCIO.cc $(PLUGINDIR)/ARCIO.h $(LIBDIR)/libmeteoio.a
ifeq ($(ARCIO),yes)
	@echo **** Compiling ARC file plugin
	$(CXX) $(CCFLAGS) -fPIC $(INCLUDE) -c -o $(PLUGINDIR)/ARCIO.o $(PLUGINDIR)/ARCIO.cc
	$(CXX) $(CCFLAGS) -rdynamic -shared -Wl,-soname,libarcio.so -o $@ $(PLUGINDIR)/ARCIO.o $(LDFLAGS)
endif

$(LIBDIR)/plugins/libgrassio.so:$(PLUGINDIR)/GrassIO.cc $(PLUGINDIR)/GrassIO.h $(LIBDIR)/libmeteoio.a
ifeq ($(GRASSIO),yes)
	@echo **** Compiling GRASS file plugin
	$(CXX) $(CCFLAGS) -fPIC $(INCLUDE) -c -o $(PLUGINDIR)/GrassIO.o $(PLUGINDIR)/GrassIO.cc
	$(CXX) $(CCFLAGS) -rdynamic -shared -Wl,-soname,libgrassio.so -o $@ $(PLUGINDIR)/GrassIO.o $(LDFLAGS)
endif

$(LIBDIR)/plugins/libgsnio.so:$(PLUGINDIR)/GSNIO.cc $(PLUGINDIR)/GSNIO.h $(LIBDIR)/libmeteoio.a
ifeq ($(GSNIO),yes)
	@echo **** Compiling GSN plugin
	cd $(PLUGINDIR)/gsn; make
	$(CXX) $(CCFLAGS) -fPIC $(INCLUDE) @GSOAPPP_CFLAGS@ -c -o $(PLUGINDIR)/GSNIO.o $(PLUGINDIR)/GSNIO.cc
	$(CXX) $(CCFLAGS) -rdynamic -shared -Wl,-soname,libgsnio.so -o $@ $(PLUGINDIR)/GSNIO.o $(PLUGINDIR)/gsn/soapA3DWebServiceSoap12BindingProxy.o $(PLUGINDIR)/gsn/soapC.o $(LDFLAGS) @GSOAPPP_LIBS@
endif

$(LIBDIR)/plugins/libimisio.so: $(PLUGINDIR)/ImisIO.cc $(PLUGINDIR)/ImisIO.h $(LIBDIR)/libmeteoio.a
ifeq ($(IMISIO),yes)
	@echo **** Compiling Imis plugin
	$(CXX) $(CCFLAGS) -fPIC $(INCLUDE) -I$(ORACLE_HOME)/client_1/rdbms/public $(PLUGINDIR)/ImisIO.cc -c -o $(PLUGINDIR)/ImisIO.o
	$(CXX) $(CCFLAGS) -rdynamic -shared -Wl,-rpath,$(ORACLE_HOME)/client_1/lib,-soname,libimisio.so -o $@ $(PLUGINDIR)/ImisIO.o $(LDFLAGS) -L$(ORACLE_HOME)/client_1/lib -locci -lclntsh -lstdc++
endif

# Dynamic libraries par
$(LIBDIR)/plugins/libgrassiopopc.so:$(PLUGINDIR)/GrassIO.cc $(PLUGINDIR)/GrassIO.h $(LIBDIR)/libmeteoiopopc.a
ifeq ($(GRASSIO),yes)
	@echo **** Compiling GRASS file plugin
	$(POPCC) $(CCFLAGS) -fPIC $(INCLUDE) -c -o $(PLUGINDIR)/GrassIO.o $(PLUGINDIR)/GrassIO.cc
	$(CXX) $(CCFLAGS) -rdynamic -shared -Wl,-soname,libgrassio.so -o $@ $(PLUGINDIR)/GrassIO.o $(LDFLAGS_POPC) $(LDFLAGS)
endif

$(LIBDIR)/plugins/libarciopopc.so:$(PLUGINDIR)/ARCIO.cc $(PLUGINDIR)/ARCIO.h $(LIBDIR)/libmeteoiopopc.a
ifeq ($(ARCIO),yes)
	@echo **** Compiling ARC file plugin
	$(POPCC) $(CCFLAGS) -fPIC $(INCLUDE) -c -o $(PLUGINDIR)/ARCIO.o $(PLUGINDIR)/ARCIO.cc
	$(CXX) $(CCFLAGS) -rdynamic -shared -Wl,-soname,libarcio.so -o $@ $(PLUGINDIR)/ARCIO.o $(LDFLAGS_POPC) $(LDFLAGS)
endif

$(LIBDIR)/plugins/libsmetiopopc.so:$(PLUGINDIR)/SMETIO.cc $(PLUGINDIR)/SMETIO.h $(LIBDIR)/libmeteoiopopc.a
ifeq ($(SMETIO),yes)
	@echo **** Compiling SMET file plugin
	$(POPCC) $(CCFLAGS) -fPIC $(INCLUDE) -c -o $(PLUGINDIR)/SMETIO.o $(PLUGINDIR)/SMETIO.cc
	$(CXX) $(CCFLAGS) -rdynamic -shared -Wl,-soname,libsmetio.so -o $@ $(PLUGINDIR)/SMETIO.o $(LDFLAGS_POPC) $(LDFLAGS)
endif

$(LIBDIR)/plugins/libsniopopc.so:$(PLUGINDIR)/SNIO.cc $(PLUGINDIR)/SNIO.h $(LIBDIR)/libmeteoiopopc.a
ifeq ($(SNIO),yes)
	@echo **** Compiling SNIO file plugin
	$(POPCC) $(CCFLAGS) -fPIC $(INCLUDE) -c -o $(PLUGINDIR)/SNIO.o $(PLUGINDIR)/SNIO.cc
	$(CXX) $(CCFLAGS) -rdynamic -shared -Wl,-soname,libsnio.so -o $@ $(PLUGINDIR)/SNIO.o $(LDFLAGS_POPC) $(LDFLAGS)
endif

$(LIBDIR)/plugins/libimisiopopc.so:$(PLUGINDIR)/ImisIO.cc $(PLUGINDIR)/ImisIO.h $(LIBDIR)/libmeteoiopopc.a
ifeq ($(IMISIO),yes)
	@echo **** Compiling Imis plugin
	$(POPCC) $(CCFLAGS) -fPIC $(INCLUDE) -I$(ORACLE_HOME)/client_1/rdbms/public -c -o $(PLUGINDIR)/ImisIO.o $(PLUGINDIR)/ImisIO.cc
	$(CXX) $(CCFLAGS) -rdynamic -shared -Wl,-soname,libimisio.so -o $@ $(PLUGINDIR)/ImisIO.o $(LDFLAGS_POPC) $(LDFLAGS) -L$(ORACLE_HOME)/client_1/lib -locci -lclntsh -lstdc++
endif

######
$(LIBDIR)/meteoio.module: $(LIBDIR)/libmeteoiopopc.a $(SRCDIR)/PackMeteoIO_par.o
	$(POPCC) $(CCFLAGS) -object -parocld=$(LINKER) -o $@ $(SRCDIR)/PackMeteoIO_par.o $(LDFLAGS) $(LDFLAGS_POPC)
