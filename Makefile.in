#
# Makefile for the METEOIO Library
#
#Destination system: either zeus, grid or safe

#Prefix: 	@prefix@
#C compiler: 	@CC@
#C++ compiler: 	@CXX@
#libxml++ libs: 	@XMLPP_LIBS@

####### USER CONFIGURATION
#Destination system: either zeus, grid or safe
DEST 	= @DEST@

# build mode: release or debug
MODE	 = @MODE@

# plugins to build (yes/no)
BOSCHUNGIO 	= @BOSCHUNGIO@
IMISIO		= @IMISIO@
GEOTOPIO	= @GEOTOPIO@
GSNIO		= @GSNIO@
ARCIO		= @ARCIO@
GRASSIO		= @GRASSIO@

####### COMPILERS AND OPTIONS
#SVNREV_GEN	= $(shell main/version.sh)
#SVNREV		= $(eval SVNREV := $(SVNREV_GEN))$(SVNREV)

ifeq ($(DEST),safe)		#safe defaults
	CC       = @CC@ -DGNU
	CXX      = @CXX@
	FF	 = gfortran
	LINKER   = @CXX@ -DGNU
	POPCC   = popcc
	ARCH     = -march=pentium3
	OPTIM    = -fomit-frame-pointer -O3
	FFOPTIM  = $(OPTIM) $(ARCH)
	FFEXTRA  = $(FFOPTIM)
	#MAKE_OPTIM = -pipe
	DEBUG    = -g -O0 -D__DEBUG #-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC #-dr 
	WARNING  = -Wall #-Weffc++ #-pedantic-errors #-Werror
endif
ifeq ($(DEST),grid)		#for grid
	CC	 = colorgcc
	CXX	 = colorgcc
	FF	 = gfortran
	LINKER   = g++ -DGNU
	POPCC   = popcc
	ARCH     = -march=native #-mmmx -msse -msse2 -mfpmath=sse -malign-double
	OPTIM    = -fomit-frame-pointer -O3 #-fdata-sections
	FFOPTIM  = $(OPTIM) - $(ARCH)
	FFEXTRA  = $(FFOPTIM) #-fno-second-underscore
	MAKE_OPTIM = -combine -pipe
	DEBUG    = -g -O0 -D__DEBUG #-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC #-dr 
	WARNING  = -Wall -Wextra #-Weffc++ #-pedantic-errors #-Werror
endif
ifeq ($(DEST),zeus)		#for Zeus
	CC       = gcc -DGNU
        #CC      = pathcc -DGNU
        CXX      = g++
        #CXX     = pathcc -DGNU
        FF       = pathf90 -DGNU
        LINKER   = g++
        POPCC   = popcc
        ARCH     = -march=x86-64 #-mmmx -msse -msse2 -m3dnow -mfpmath=sse #-malign-double
        #ARCH     = -march=opteron -mmmx -msse -msse2 -m3dnow
        OPTIM    = #-fomit-frame-pointer #-O3 -fdata-sections
        #OPTIM   = -O2 -Wstrict-aliasing #-fno-strict-aliasing
        FFOPTIM  = $(OPTIM) -march=opteron #-m3dnow -m64 -mmmx -msse -msse2 -ffast-stdlib 
        FFEXTRA  = -fno-second-underscore $(FFOPTIM)
	MAKE_OPTIM = -pipe
	DEBUG    = -g -O0 -D__DEBUG
	WARNING  = -Wall
endif

ifeq ($(MODE),debug)		#for debug
	CFLAGS   = $(MAKE_OPTIM) $(ARCH) $(DEBUG) $(WARNING)
	CCFLAGS  = $(MAKE_OPTIM) $(ARCH) $(DEBUG) $(WARNING)
	FFLAGS	 = $(MAKE_OPTIM) $(DEBUG) $(WARNING)
else				#for release
	CFLAGS   = $(MAKE_OPTIM) $(ARCH) $(OPTIM) $(WARNING)
	CCFLAGS  = $(MAKE_OPTIM) $(ARCH) $(OPTIM) $(WARNING)
	FFLAGS	 = $(MAKE_OPTIM) $(FFOPTIM) $(WARNING)
endif
#CCFLAGS += -DSVNREV="\"$(SVNREV)\""

####### DIRECTORIES
TARGET		= meteoio
TARGET_POPC	= meteoio_par

SRCDIR		= ./src
PLUGINDIR	= ./src/plugins
LIBDIR		= ./lib
FILTERDIR	= $(SRCDIR)/filter
TOOLSDIR	= ./tools

#################################################
# END USER OPTIONS
#################################################

LIBS		= -lc -ldl -lm -lstdc++
LDFLAGS_SEQ	= -L$(LIBDIR) -lmeteoio -lfilter
LD_POPC	= -L$(LIBDIR) -lmeteoiopopc -lfilterpopc
LDFLAGS_POPC	= $(LD_POPC)
LDFLAGS		= $(LIBS) -rdynamic
INCLUDE		= -I$(SRCDIR) -I$(FILTERDIR)

######## Sources, objects, headers
METEOIO_OBJ = 	$(SRCDIR)/MeteoData.o \
		$(SRCDIR)/StationData.o \
		$(SRCDIR)/IOHandler.o \
		$(SRCDIR)/IOInterface.o \
		$(SRCDIR)/DynamicLibrary.o \
		$(SRCDIR)/A3DIO.o \
		$(SRCDIR)/BufferedIOHandler.o \
		$(SRCDIR)/ConfigReader.o \
		$(SRCDIR)/Date_IO.o \
		$(SRCDIR)/Grid2DObject.o \
		$(SRCDIR)/Grid3DObject.o \
		$(SRCDIR)/DEMObject.o \
		$(SRCDIR)/IOExceptions.o \
		$(SRCDIR)/IOUtils.o \
		$(SRCDIR)/MapProj.o \
		$(SRCDIR)/Laws.o \
		$(SRCDIR)/libinterpol2D.o \
		$(SRCDIR)/libinterpol1D.o \
		$(SRCDIR)/Meteo1DResampler.o \
		$(SRCDIR)/Meteo2DInterpolator.o \
		$(SRCDIR)/MeteoBuffer.o \
		$(SRCDIR)/Meteo1DResampler.o \
		$(SRCDIR)/LegacyIO.o 

METEOIO_OBJ_POPC =  $(SRCDIR)/IOInterface_par.o \
		$(SRCDIR)/LegacyIO_par.o \
		$(SRCDIR)/IOInterface_par.o \
		$(SRCDIR)/IOHandler.stub.o \
		$(SRCDIR)/IOHandler_par.o \
		$(SRCDIR)/BufferedIOHandler_par.o \
		$(SRCDIR)/A3DIO_par.o \
		$(SRCDIR)/LegacyIO.stub.o \
		$(SRCDIR)/MeteoData_par.o \
		$(SRCDIR)/StationData_par.o \
		$(SRCDIR)/ConfigReader_par.o \
		$(SRCDIR)/Date_IO_par.o \
		$(SRCDIR)/Grid2DObject_par.o \
		$(SRCDIR)/Grid3DObject_par.o \
		$(SRCDIR)/DEMObject_par.o \
		$(SRCDIR)/IOExceptions_par.o \
		$(SRCDIR)/IOUtils_par.o \
		$(SRCDIR)/MapProj_par.o \
		$(SRCDIR)/Laws.o \
		$(SRCDIR)/libinterpol2D_par.o \
		$(SRCDIR)/libinterpol1D_par.o \
		$(SRCDIR)/Meteo1DResampler_par.o \
		$(SRCDIR)/Meteo2DInterpolator_par.o \
		$(SRCDIR)/MeteoBuffer_par.o \
		$(SRCDIR)/Meteo1DResampler_par.o \
		$(SRCDIR)/DynamicLibrary_par.o \
		$(SRCDIR)/marshal_meteoio_par.o 

FILTER_OBJ = 	$(FILTERDIR)/FilterBase.o \
		$(FILTERDIR)/FilterBase1Stn.o \
		$(FILTERDIR)/FilterValue.o \
		$(FILTERDIR)/MinValue.o \
		$(FILTERDIR)/MaxValue.o \
		$(FILTERDIR)/MinMaxValue.o \
		$(FILTERDIR)/MaxChangeRate.o \
		$(FILTERDIR)/NoObservedChange.o \
		$(FILTERDIR)/FilterFacade.o 

FILTER_OBJ_POPC  = 	$(FILTERDIR)/FilterBase_par.o \
		$(FILTERDIR)/FilterBase1Stn_par.o \
		$(FILTERDIR)/FilterValue_par.o \
		$(FILTERDIR)/MinValue_par.o \
		$(FILTERDIR)/MaxValue_par.o \
		$(FILTERDIR)/MinMaxValue_par.o \
		$(FILTERDIR)/MaxChangeRate_par.o \
		$(FILTERDIR)/NoObservedChange_par.o \
		$(FILTERDIR)/FilterFacade_par.o 

TOOLS_OBJ =	$(TOOLSDIR)/createA3DFiles.o

####### Build rules SEQ

all: seq 
	@echo -e "*** MeteoIO compiled for \033[36m$(DEST)\033[0m"

help:
	@echo -e "MeteoIO Makefile targets for \033[36m$(DEST)\033[0m:" 
	@echo -e " \033[36mseq\033[0m"
	@echo -e " \033[36mcreateA3DFiles\033[0m"
	@echo -e " \033[36mpopc\033[0m"
	@echo -e " \033[36minstall\033[0m"
	@echo -e " \033[36mclean\033[0m"
	@echo -e " \033[36mdistclean\033[0m"
	@echo -e " \033[36mdocumentation\033[0m"

seq: $(LIBDIR)/libmeteoio.a build_dynamiclibs build_staticlibs

build_staticlibs: $(LIBDIR)/libfilter.a

build_dynamiclibs: $(LIBDIR)/libboschungio.so \
			$(LIBDIR)/libimisio.so \
			$(LIBDIR)/libgeotopio.so \
			$(LIBDIR)/libgsnio.so \
			$(LIBDIR)/libarcio.so \
			$(LIBDIR)/libgrassio.so 

############## POPC ##############
par: meteoIO_lib_par meteoIO_module_par filter_lib_par

filter_lib_par: $(LIBDIR)/libfilterpopc.a

meteoIO_lib_par: $(LIBDIR)/libmeteoiopopc.a 

meteoIO_module_par: $(LIBDIR)/meteoio.module
##############  END  ##############

clean:
	rm -f $(SRCDIR)/*~ $(SRCDIR)/*.o $(FILTERDIR)/*~ $(FILTERDIR)/*.o $(TOOLSDIR)/*.o $(PLUGINDIR)/*.o
	cd $(PLUGINDIR)/gsn; make clean

distclean: clean
	rm -f $(TOOLSDIR)/createA3DFiles
	rm -f $(LIBDIR)/*.a $(LIBDIR)/*.so $(LIBDIR)/*.module

install:
	@echo **** Installing MeteoIO

documentation:
	doxygen $(SRCDIR)/config.dox

createA3DFiles: $(TOOLS_OBJ)
	$(CXX) $(CCFLAGS) $< $(INCLUDE) $(LDFLAGS_SEQ) $(LDFLAGS) -o $(TOOLSDIR)/$@

####### Compile

.cc.o: $*.cc $*.h
	$(CXX) $(CCFLAGS) -c $< $(INCLUDE) -o $@

%_par.o : %.cc
	$(POPCC) $(CCFLAGS) -c $< $(INCLUDE) -o $@

%.stub.o : %.ph
	$(POPCC) $(CCFLAGS) -c $< $(INCLUDE) -o $@


$(LIBDIR)/libmeteoio.a: $(METEOIO_OBJ)
	@echo **** Compiling libmeteoIO
	ar -r $@ $(METEOIO_OBJ)
	ranlib $@

$(LIBDIR)/libfilter.a: $(FILTER_OBJ)
	ar -r $@ $(FILTER_OBJ)
	ranlib $@

$(LIBDIR)/libboschungio.so: $(PLUGINDIR)/BoschungIO.cc $(PLUGINDIR)/BoschungIO.h $(LIBDIR)/libmeteoio.a $(LIBDIR)/libfilter.a
ifeq ($(BOSCHUNGIO),yes)
	@echo **** Compiling Boschung plugin
	$(CXX) $(CCFLAGS) -fPIC $(INCLUDE) @XMLPP_CFLAGS@ -c -o $(PLUGINDIR)/BoschungIO.o $(PLUGINDIR)/BoschungIO.cc 
	$(CXX) $(CCFLAGS) -rdynamic -shared -Wl,-soname,libboschungio.so -o $@ $(PLUGINDIR)/BoschungIO.o $(LDFLAGS) @XMLPP_LIBS@
endif

$(LIBDIR)/libgeotopio.so:$(PLUGINDIR)/GeotopIO.cc $(PLUGINDIR)/GeotopIO.h $(LIBDIR)/libmeteoio.a $(LIBDIR)/libfilter.a
ifeq ($(GEOTOPIO),yes)
	@echo **** Compiling GeoTOP plugin
	$(CXX) $(CCFLAGS) -fPIC $(INCLUDE) -c -o $(PLUGINDIR)/GeotopIO.o $(PLUGINDIR)/GeotopIO.cc 
	$(CXX) $(CCFLAGS) -rdynamic -shared -Wl,-soname,libgeotopio.so -o $@ $(PLUGINDIR)/GeotopIO.o $(LDFLAGS)
endif

$(LIBDIR)/libarcio.so:$(PLUGINDIR)/ARCIO.cc $(PLUGINDIR)/ARCIO.h $(LIBDIR)/libmeteoio.a $(LIBDIR)/libfilter.a
ifeq ($(ARCIO),yes)
	@echo **** Compiling ARC file plugin
	$(CXX) $(CCFLAGS) -fPIC $(INCLUDE) -c -o $(PLUGINDIR)/ARCIO.o $(PLUGINDIR)/ARCIO.cc 
	$(CXX) $(CCFLAGS) -rdynamic -shared -Wl,-soname,libarcio.so -o $@ $(PLUGINDIR)/ARCIO.o $(LDFLAGS)
endif

$(LIBDIR)/libgrassio.so:$(PLUGINDIR)/GrassIO.cc $(PLUGINDIR)/GrassIO.h $(LIBDIR)/libmeteoio.a $(LIBDIR)/libfilter.a
ifeq ($(GRASSIO),yes)
	@echo **** Compiling GRASS file plugin
	$(CXX) $(CCFLAGS) -fPIC $(INCLUDE) -c -o $(PLUGINDIR)/GrassIO.o $(PLUGINDIR)/GrassIO.cc 
	$(CXX) $(CCFLAGS) -rdynamic -shared -Wl,-soname,libgrassio.so -o $@ $(PLUGINDIR)/GrassIO.o $(LDFLAGS)
endif

$(LIBDIR)/libgsnio.so:$(PLUGINDIR)/GSNIO.cc $(PLUGINDIR)/GSNIO.h $(LIBDIR)/libmeteoio.a $(LIBDIR)/libfilter.a
ifeq ($(GSNIO),yes)
	@echo **** Compiling GSN plugin
	cd $(PLUGINDIR)/gsn; make
	$(CXX) $(CCFLAGS) -fPIC $(INCLUDE) @GSOAPPP_CFLAGS@ -c -o $(PLUGINDIR)/GSNIO.o $(PLUGINDIR)/GSNIO.cc 
	$(CXX) $(CCFLAGS) -rdynamic -shared -Wl,-soname,libgsnio.so -o $@ $(PLUGINDIR)/GSNIO.o $(PLUGINDIR)/gsn/soapA3DWebServiceSoap12BindingProxy.o $(PLUGINDIR)/gsn/soapC.o $(LDFLAGS) @GSOAPPP_LIBS@ 
endif

$(LIBDIR)/libimisio.so: $(PLUGINDIR)/ImisIO.cc $(PLUGINDIR)/ImisIO.h $(LIBDIR)/libmeteoio.a $(LIBDIR)/libfilter.a
ifeq ($(IMISIO),yes)
	@echo **** Compiling Imis plugin
	$(CXX) $(CCFLAGS) -fPIC $(INCLUDE) -I$(ORACLE_HOME)/rdbms/public $(PLUGINDIR)/ImisIO.cc -c -o $(PLUGINDIR)/ImisIO.o
	$(CXX) $(CCFLAGS) -rdynamic -shared -Wl,-rpath,$(ORACLE_HOME)/lib,-soname,libimisio.so -o $@ $(PLUGINDIR)/ImisIO.o $(LDFLAGS) -L$(ORACLE_HOME)/lib -locci -lclntsh -lstdc++
endif

$(LIBDIR)/meteoio.module: $(LIBDIR)/libmeteoiopopc.a $(LIBDIR)/libfilterpopc.a $(SRCDIR)/PackMeteoIO_par.o
	$(POPCC) $(CCFLAGS) -object -parocld=$(LINKER) -o $@ $(SRCDIR)/PackMeteoIO_par.o $(LDFLAGS) $(LDFLAGS_POPC)

$(LIBDIR)/libmeteoiopopc.a:  $(METEOIO_OBJ_POPC)
	ar -r $@ $(METEOIO_OBJ_POPC)
	ranlib $@

$(LIBDIR)/libfilterpopc.a: $(FILTER_OBJ_POPC)
	ar -r $@ $(FILTER_OBJ_POPC)
	ranlib $@

